getgenv().GG = {
    Language = {
        CheckboxEnabled = "Enabled",
        CheckboxDisabled = "Disabled",
        SliderValue = "Value",
        DropdownSelect = "Select",
        DropdownNone = "None",
        DropdownSelected = "Selected",
        ButtonClick = "Click",
        TextboxEnter = "Enter",
        ModuleEnabled = "Enabled",
        ModuleDisabled = "Disabled",
        TabGeneral = "General",
        TabSettings = "Settings",
        Loading = "Loading...",
        Error = "Error",
        Success = "Success"
    }
}

local SelectedLanguage = GG.Language

function convertStringToTable(inputString)
    local result = {}
    for value in string.gmatch(inputString, "([^,]+)") do
        local trimmedValue = value:match("^%s*(.-)%s*$")
        table.insert(result, trimmedValue)
    end

    return result
end

function convertTableToString(inputTable)
    return table.concat(inputTable, ", ")
end

local UserInputService = cloneref(game:GetService('UserInputService'))
local ContentProvider = cloneref(game:GetService('ContentProvider'))
local TweenService = cloneref(game:GetService('TweenService'))
local HttpService = cloneref(game:GetService('HttpService'))
local TextService = cloneref(game:GetService('TextService'))
local RunService = cloneref(game:GetService('RunService'))
local Lighting = cloneref(game:GetService('Lighting'))
local Players = cloneref(game:GetService('Players'))
local CoreGui = cloneref(game:GetService('CoreGui'))
local Debris = cloneref(game:GetService('Debris'))

local mouse = Players.LocalPlayer:GetMouse()
local old_click = CoreGui:FindFirstChild('click')

if old_click then
    Debris:AddItem(old_click, 0)
end

if not isfolder("click") then
    makefolder("click")
end


local Connections = setmetatable({
    disconnect = function(self, connection)
        if not self[connection] then
            return
        end
    
        self[connection]:Disconnect()
        self[connection] = nil
    end,
    disconnect_all = function(self)
        for _, value in self do
            if typeof(value) == 'function' then
                continue
            end
    
            value:Disconnect()
        end
    end
}, Connections)


local Util = setmetatable({
    map = function(self: any, value: number, in_minimum: number, in_maximum: number, out_minimum: number, out_maximum: number)
        return (value - in_minimum) * (out_maximum - out_minimum) / (in_maximum - in_minimum) + out_minimum
    end,
    viewport_point_to_world = function(self: any, location: any, distance: number)
        local unit_ray = workspace.CurrentCamera:ScreenPointToRay(location.X, location.Y)

        return unit_ray.Origin + unit_ray.Direction * distance
    end,
    get_offset = function(self: any)
        local viewport_size_Y = workspace.CurrentCamera.ViewportSize.Y

        return self:map(viewport_size_Y, 0, 2560, 8, 56)
    end
}, Util)


local AcrylicBlur = {}
AcrylicBlur.__index = AcrylicBlur


function AcrylicBlur.new(object: GuiObject)
    local self = setmetatable({
        _object = object,
        _folder = nil,
        _frame = nil,
        _root = nil
    }, AcrylicBlur)

    self:setup()

    return self
end


function AcrylicBlur:create_folder()
    local old_folder = workspace.CurrentCamera:FindFirstChild('AcrylicBlur')

    if old_folder then
        Debris:AddItem(old_folder, 0)
    end

    local folder = Instance.new('Folder')
    folder.Name = 'AcrylicBlur'
    folder.Parent = workspace.CurrentCamera

    self._folder = folder
end


function AcrylicBlur:create_depth_of_fields()
    local depth_of_fields = Lighting:FindFirstChild('AcrylicBlur') or Instance.new('DepthOfFieldEffect')
    depth_of_fields.FarIntensity = 0
    depth_of_fields.FocusDistance = 0.05
    depth_of_fields.InFocusRadius = 0.1
    depth_of_fields.NearIntensity = 1
    depth_of_fields.Name = 'AcrylicBlur'
    depth_of_fields.Parent = Lighting

    for _, object in Lighting:GetChildren() do
        if not object:IsA('DepthOfFieldEffect') then
            continue
        end

        if object == depth_of_fields then
            continue
        end

        Connections[object] = object:GetPropertyChangedSignal('FarIntensity'):Connect(function()
            object.FarIntensity = 0
        end)

        object.FarIntensity = 0
    end
end


function AcrylicBlur:create_frame()
    local frame = Instance.new('Frame')
    frame.Size = UDim2.new(1, 0, 1, 0)
    frame.Position = UDim2.new(0.5, 0, 0.5, 0)
    frame.AnchorPoint = Vector2.new(0.5, 0.5)
    frame.BackgroundTransparency = 1
    frame.Parent = self._object

    self._frame = frame
end


function AcrylicBlur:create_root()
    local part = Instance.new('Part')
    part.Name = 'Root'
    part.Color = Color3.new(0, 0, 0)
    part.Material = Enum.Material.Glass
    part.Size = Vector3.new(1, 1, 0) 
    part.Anchored = true
    part.CanCollide = false
    part.CanQuery = false
    part.Locked = true
    part.CastShadow = false
    part.Transparency = 0.98
    part.Parent = self._folder


    local specialMesh = Instance.new('SpecialMesh')
    specialMesh.MeshType = Enum.MeshType.Brick  
    specialMesh.Offset = Vector3.new(0, 0, -0.000001)  
    specialMesh.Parent = part

    self._root = part 
end


function AcrylicBlur:setup()
    self:create_depth_of_fields()
    self:create_folder()
    self:create_root()
    
    self:create_frame()
    self:render(0.001)

    self:check_quality_level()
end


function AcrylicBlur:render(distance: number)
    local positions = {
        top_left = Vector2.new(),
        top_right = Vector2.new(),
        bottom_right = Vector2.new(),
    }

    local function update_positions(size: any, position: any)
        positions.top_left = position
        positions.top_right = position + Vector2.new(size.X, 0)
        positions.bottom_right = position + size
    end

    local function update()
        local top_left = positions.top_left
        local top_right = positions.top_right
        local bottom_right = positions.bottom_right

        local top_left3D = Util:viewport_point_to_world(top_left, distance)
        local top_right3D = Util:viewport_point_to_world(top_right, distance)
        local bottom_right3D = Util:viewport_point_to_world(bottom_right, distance)

        local width = (top_right3D - top_left3D).Magnitude
        local height = (top_right3D - bottom_right3D).Magnitude

        if not self._root then
            return
        end

        self._root.CFrame = CFrame.fromMatrix((top_left3D + bottom_right3D) / 2, workspace.CurrentCamera.CFrame.XVector, workspace.CurrentCamera.CFrame.YVector, workspace.CurrentCamera.CFrame.ZVector)
        self._root.Mesh.Scale = Vector3.new(width, height, 0)
    end

    local function on_change()
        local offset = Util:get_offset()
        local size = self._frame.AbsoluteSize - Vector2.new(offset, offset)
        local position = self._frame.AbsolutePosition + Vector2.new(offset / 2, offset / 2)

        update_positions(size, position)
        task.spawn(update)
    end

    Connections['cframe_update'] = workspace.CurrentCamera:GetPropertyChangedSignal('CFrame'):Connect(update)
    Connections['viewport_size_update'] = workspace.CurrentCamera:GetPropertyChangedSignal('ViewportSize'):Connect(update)
    Connections['field_of_view_update'] = workspace.CurrentCamera:GetPropertyChangedSignal('FieldOfView'):Connect(update)

    Connections['frame_absolute_position'] = self._frame:GetPropertyChangedSignal('AbsolutePosition'):Connect(on_change)
    Connections['frame_absolute_size'] = self._frame:GetPropertyChangedSignal('AbsoluteSize'):Connect(on_change)
    
    task.spawn(update)
end


function AcrylicBlur:check_quality_level()
    local game_settings = UserSettings().GameSettings
    local quality_level = game_settings.SavedQualityLevel.Value

    if quality_level < 8 then
        self:change_visiblity(false)
    end

    Connections['quality_level'] = game_settings:GetPropertyChangedSignal('SavedQualityLevel'):Connect(function()
        local game_settings = UserSettings().GameSettings
        local quality_level = game_settings.SavedQualityLevel.Value

        self:change_visiblity(quality_level >= 8)
    end)
end


function AcrylicBlur:change_visiblity(state: boolean)
    self._root.Transparency = state and 0.98 or 1
end


local Config = setmetatable({
    save = function(self: any, file_name: any, config: any)
        local success_save, result = pcall(function()
            local flags = HttpService:JSONEncode(config)
            writefile('click/'..file_name..'.json', flags)
        end)
    
        if not success_save then
            warn('failed to save config', result)
        end
    end,
    load = function(self: any, file_name: any, config: any)
        local success_load, result = pcall(function()
            if not isfile('click/'..file_name..'.json') then
                self:save(file_name, config)
        
                return
            end
        
            local flags = readfile('click/'..file_name..'.json')
        
            if not flags then
                self:save(file_name, config)
        
                return
            end

            return HttpService:JSONDecode(flags)
        end)
    
        if not success_load then
            warn('failed to load config', result)
        end
    
        if not result then
            result = {
                _flags = {},
                _keybinds = {},
                _library = {}
            }
        end
    
        return result
    end
}, Config)


local Library = {
    _config = Config:load(game.GameId),

    _choosing_keybind = false,
    _device = nil,

    _ui_open = true,
    _ui_scale = 1,
    _ui_loaded = false,
    _ui = nil,

    _dragging = false,
    _drag_start = nil,
    _container_position = nil
}
Library.__index = Library


function Library.new()
    local self = setmetatable({
        _loaded = false,
        _tab = 0,
    }, Library)
    
    self:create_ui()

    return self
end


local NotificationContainer = Instance.new("Frame")
NotificationContainer.Name = "RobloxCoreGuis"
NotificationContainer.Size = UDim2.new(0, 300, 0, 0)  
NotificationContainer.Position = UDim2.new(0.8, 0, 0, 10)  
NotificationContainer.BackgroundTransparency = 1
NotificationContainer.ClipsDescendants = false;
NotificationContainer.Parent = game:GetService("CoreGui").RobloxGui:FindFirstChild("RobloxCoreGuis") or Instance.new("ScreenGui", game:GetService("CoreGui").RobloxGui)
NotificationContainer.AutomaticSize = Enum.AutomaticSize.Y


local UIListLayout = Instance.new("UIListLayout")
UIListLayout.FillDirection = Enum.FillDirection.Vertical
UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
UIListLayout.Padding = UDim.new(0, 10)
UIListLayout.Parent = NotificationContainer


function Library.SendNotification(settings)
  
    local Notification = Instance.new("Frame")
    Notification.Size = UDim2.new(1, 0, 0, 60)  
    Notification.BackgroundTransparency = 1  
    Notification.BorderSizePixel = 0
    Notification.Name = "Notification"
    Notification.Parent = NotificationContainer  
    Notification.AutomaticSize = Enum.AutomaticSize.Y  

   
    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0, 4)
    UICorner.Parent = Notification

   
    local InnerFrame = Instance.new("Frame")
    InnerFrame.Size = UDim2.new(1, 0, 0, 60)  
    InnerFrame.Position = UDim2.new(0, 0, 0, 0)  
    InnerFrame.BackgroundColor3 = Color3.fromRGB(51, 8, 0)
    InnerFrame.BackgroundTransparency = 1
    InnerFrame.BorderSizePixel = 0
    InnerFrame.Name = "InnerFrame"
    InnerFrame.Parent = Notification
    InnerFrame.AutomaticSize = Enum.AutomaticSize.Y  

    
    local InnerUICorner = Instance.new("UICorner")
    InnerUICorner.CornerRadius = UDim.new(0, 4)
    InnerUICorner.Parent = InnerFrame

   
    local Title = Instance.new("TextLabel")
    Title.Text = settings.title or "Notification Title"
    Title.TextColor3 = Color3.fromRGB(255, 255, 255)
    Title.FontFace = Font.new('rbxasset://fonts/families/GothamSSm.json', Enum.FontWeight.SemiBold, Enum.FontStyle.Normal)
    Title.TextSize = 14
    Title.Size = UDim2.new(1, -10, 0, 20)  
    Title.Position = UDim2.new(0, 5, 0, 5)
    Title.BackgroundTransparency = 1
    Title.TextXAlignment = Enum.TextXAlignment.Left
    Title.TextYAlignment = Enum.TextYAlignment.Center
    Title.TextWrapped = true
    Title.AutomaticSize = Enum.AutomaticSize.Y 
    Title.Parent = InnerFrame

    
    local Body = Instance.new("TextLabel")
    Body.Text = settings.text or "This is the body of the notification."
    Body.TextColor3 = Color3.fromRGB(153, 68, 0)
    Body.FontFace = Font.new('rbxasset://fonts/families/GothamSSm.json', Enum.FontWeight.Regular, Enum.FontStyle.Normal)
    Body.TextSize = 12
    Body.Size = UDim2.new(1, -10, 0, 30) 
    Body.Position = UDim2.new(0, 5, 0, 25)
    Body.BackgroundTransparency = 1
    Body.TextXAlignment = Enum.TextXAlignment.Left
    Body.TextYAlignment = Enum.TextYAlignment.Top
    Body.TextWrapped = true  
    Body.AutomaticSize = Enum.AutomaticSize.Y  
    Body.Parent = InnerFrame

   
    task.spawn(function()
        wait(0.1) 
        
        local totalHeight = Title.TextBounds.Y + Body.TextBounds.Y + 10  
        InnerFrame.Size = UDim2.new(1, 0, 0, totalHeight)  
    end)

   
    task.spawn(function()
       
        local tweenIn = TweenService:Create(InnerFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
            Position = UDim2.new(0, 0, 0, 10 + NotificationContainer.Size.Y.Offset)
        })
        tweenIn:Play()

        
        local duration = settings.duration or 5  
        wait(duration)

        
        local tweenOut = TweenService:Create(InnerFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.In), {
            Position = UDim2.new(1, 310, 0, 10 + NotificationContainer.Size.Y.Offset) 
        })
        tweenOut:Play()

        
        tweenOut.Completed:Connect(function()
            Notification:Destroy()
        end)
    end)
end

function Library:get_screen_scale()
    local viewport_size_x = workspace.CurrentCamera.ViewportSize.X

    self._ui_scale = viewport_size_x / 1400
end


function Library:get_device()
    local device = 'Unknown'

    if not UserInputService.TouchEnabled and UserInputService.KeyboardEnabled and UserInputService.MouseEnabled then
        device = 'PC'
    elseif UserInputService.TouchEnabled then
        device = 'Mobile'
    elseif UserInputService.GamepadEnabled then
        device = 'Console'
    end

    self._device = device
end


function Library:removed(action: any)
    self._ui.AncestryChanged:Once(action)
end


function Library:flag_type(flag: any, flag_type: any)
    if not Library._config._flags[flag] then
        return
    end

    return typeof(Library._config._flags[flag]) == flag_type
end


function Library:remove_table_value(__table: any, table_value: string)
    for index, value in __table do
        if value ~= table_value then
            continue
        end

        table.remove(__table, index)
    end
end


function Library:create_ui()
    local old_click = CoreGui:FindFirstChild('click')

    if old_click then
        Debris:AddItem(old_click, 0)
    end

    local click = Instance.new('ScreenGui')
    click.ResetOnSpawn = false
    click.Name = 'click'
    click.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    click.Parent = CoreGui
    
    local Container = Instance.new('Frame')
    Container.ClipsDescendants = true
    Container.BorderColor3 = Color3.fromRGB(51, 8, 0)
    Container.AnchorPoint = Vector2.new(0.5, 0.5)
    Container.Name = 'Container'
    Container.BackgroundTransparency = 0.05
    Container.BackgroundColor3 = Color3.fromRGB(51, 8, 0)
    Container.Position = UDim2.new(0.5, 0, 0.5, 0)
    Container.Size = UDim2.new(0, 0, 0, 0)
    Container.Active = true
    Container.BorderSizePixel = 0
    Container.Parent = click
    
    local UICorner = Instance.new('UICorner')
    UICorner.CornerRadius = UDim.new(0, 10)
    UICorner.Parent = Container
    
    local UIStroke = Instance.new('UIStroke')
    UIStroke.Color = Color3.fromRGB(51, 8, 0)
    UIStroke.Transparency = 0.5
    UIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    UIStroke.Parent = Container
    
    local Handler = Instance.new('Frame')
    Handler.BackgroundTransparency = 1
    Handler.Name = 'Handler'
    Handler.BorderColor3 = Color3.fromRGB(51, 8, 0)
    Handler.Size = UDim2.new(0, 698, 0, 479)
    Handler.BorderSizePixel = 0
    Handler.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Handler.Parent = Container
    
    local Tabs = Instance.new('ScrollingFrame')
    Tabs.ScrollBarImageTransparency = 1
    Tabs.ScrollBarThickness = 0
    Tabs.Name = 'Tabs'
    Tabs.Size = UDim2.new(0, 129, 0, 401)
    Tabs.Selectable = false
    Tabs.AutomaticCanvasSize = Enum.AutomaticSize.XY
    Tabs.BackgroundTransparency = 1
    Tabs.Position = UDim2.new(0.026097271591424942, 0, 0.1111111119389534, 0)
    Tabs.BorderColor3 = Color3.fromRGB(51, 8, 0)
    Tabs.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Tabs.BorderSizePixel = 0
    Tabs.CanvasSize = UDim2.new(0, 0, 0.5, 0)
    Tabs.Parent = Handler
    
    local UIListLayout = Instance.new('UIListLayout')
    UIListLayout.Padding = UDim.new(0, 4)
    UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    UIListLayout.Parent = Tabs
    
    local ClientName = Instance.new('TextLabel')
    ClientName.FontFace = Font.new('rbxasset://fonts/families/GothamSSm.json', Enum.FontWeight.SemiBold, Enum.FontStyle.Normal)
    ClientName.TextColor3 = Color3.fromRGB(153, 68, 0)
    ClientName.TextTransparency = 0.20000000298023224
	local ClientName = Instance.new('TextLabel')
	ClientName.FontFace = Font.new('rbxasset://fonts/families/GothamSSm.json', Enum.FontWeight.SemiBold, Enum.FontStyle.Normal)
	ClientName.TextColor3 = Color3.fromRGB(153, 68, 0)
	ClientName.TextTransparency = 0.2
	ClientName.Name = 'ClientName'
	ClientName.Size = UDim2.new(0, 150, 0, 20)
	ClientName.AnchorPoint = Vector2.new(0, 0.5)

	local spinChars = {"/", "-", "\\", "|"}
	local i = 1

task.spawn(function()
    while true do
        ClientName.Text = " click " .. spinChars[i] .. " " .. os.date("%I:%M:%S %p")
        i = i % #spinChars + 1
        task.wait(0.2)
    end
end)

    ClientName.Position = UDim2.new(0.0560000017285347, 0, 0.054999999701976776, 0)
    ClientName.BackgroundTransparency = 1
    ClientName.TextXAlignment = Enum.TextXAlignment.Left
    ClientName.BorderSizePixel = 0
    ClientName.BorderColor3 = Color3.fromRGB(51, 8, 0)
    ClientName.TextSize = 13
    ClientName.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    ClientName.Parent = Handler
    
    local UIGradient = Instance.new('UIGradient')
    UIGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(153, 68, 0)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 255, 255))
    }
    UIGradient.Parent = ClientName
    
    local Pin = Instance.new('Frame')
    Pin.Name = 'Pin'
    Pin.Position = UDim2.new(0.026000000536441803, 0, 0.13600000739097595, 0)
    Pin.BorderColor3 = Color3.fromRGB(51, 8, 0)
    Pin.Size = UDim2.new(0, 2, 0, 16)
    Pin.BorderSizePixel = 0
    Pin.BackgroundColor3 = Color3.fromRGB(153, 68, 0)
    Pin.Parent = Handler
    
    local UICorner = Instance.new('UICorner')
    UICorner.CornerRadius = UDim.new(1, 0)
    UICorner.Parent = Pin
    
    local Icon = Instance.new('ImageLabel')
    Icon.ImageColor3 = Color3.fromRGB(153, 68, 0)
    Icon.ScaleType = Enum.ScaleType.Fit
    Icon.BorderColor3 = Color3.fromRGB(51, 8, 0)
    Icon.AnchorPoint = Vector2.new(0, 0.5)
    Icon.Image = 'rbxassetid://102985234114068'
    Icon.BackgroundTransparency = 1
    Icon.Position = UDim2.new(0.021, 0,0.053, 0)
    Icon.Name = 'Icon'
    Icon.Size = UDim2.new(0, 27,0, 26)
    Icon.BorderSizePixel = 0
    Icon.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Icon.Parent = Handler
    
    local Divider = Instance.new('Frame')
    Divider.Name = 'Divider'
    Divider.BackgroundTransparency = 0.4
    Divider.Position = UDim2.new(0.23499999940395355, 0, 0, 0)
    Divider.BorderColor3 = Color3.fromRGB(51, 8, 0)
    Divider.Size = UDim2.new(0, 1, 0, 479)
    Divider.BorderSizePixel = 0
    Divider.BackgroundColor3 = Color3.fromRGB(128, 51, 0)
    Divider.Parent = Handler
    
    local Sections = Instance.new('Folder')
    Sections.Name = 'Sections'
    Sections.Parent = Handler
    
    local Minimize = Instance.new('TextButton')
    Minimize.FontFace = Font.new('rbxasset://fonts/families/SourceSansPro.json', Enum.FontWeight.Regular, Enum.FontStyle.Normal)
    Minimize.TextColor3 = Color3.fromRGB(51, 8, 0)
    Minimize.BorderColor3 = Color3.fromRGB(51, 8, 0)
    Minimize.Text = ''
    Minimize.AutoButtonColor = false
    Minimize.Name = 'Minimize'
    Minimize.BackgroundTransparency = 1
    Minimize.Position = UDim2.new(0.020057305693626404, 0, 0.02922755666077137, 0)
    Minimize.Size = UDim2.new(0, 24, 0, 24)
    Minimize.BorderSizePixel = 0
    Minimize.TextSize = 14
    Minimize.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Minimize.Parent = Handler
    
    local UIScale = Instance.new('UIScale')
    UIScale.Parent = Container    
    
    self._ui = click

    local function on_drag(input: InputObject, process: boolean)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then 
            self._dragging = true
            self._drag_start = input.Position
            self._container_position = Container.Position

            Connections['container_input_ended'] = input.Changed:Connect(function()
                if input.UserInputState ~= Enum.UserInputState.End then
                    return
                end

                Connections:disconnect('container_input_ended')
                self._dragging = false
            end)
        end
    end

    local function update_drag(input: any)
        local delta = input.Position - self._drag_start
        local position = UDim2.new(self._container_position.X.Scale, self._container_position.X.Offset + delta.X, self._container_position.Y.Scale, self._container_position.Y.Offset + delta.Y)

        TweenService:Create(Container, TweenInfo.new(0.2), {
            Position = position
        }):Play()
    end

    local function drag(input: InputObject, process: boolean)
        if not self._dragging then
            return
        end

        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            update_drag(input)
        end
    end

    Connections['container_input_began'] = Container.InputBegan:Connect(on_drag)
    Connections['input_changed'] = UserInputService.InputChanged:Connect(drag)

    self:removed(function()
        self._ui = nil
        Connections:disconnect_all()
    end)

    function self:Update1Run(a)
        if a == "nil" then
            Container.BackgroundTransparency = 0.4;
        else
            pcall(function()
                Container.BackgroundTransparency = tonumber(a);
            end);
        end;
    end;

    function self:UIVisiblity()
        click.Enabled = not click.Enabled;
    end;

    function self:change_visiblity(state: boolean)
        if state then
            TweenService:Create(Container, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                Size = UDim2.fromOffset(698, 479)
            }):Play()
        else
            TweenService:Create(Container, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                Size = UDim2.fromOffset(158, 52)
            }):Play()
        end
    end
    

    function self:load()
        local content = {}
    
        for _, object in click:GetDescendants() do
            if not object:IsA('ImageLabel') then
                continue
            end
    
            table.insert(content, object)
        end
    
        ContentProvider:PreloadAsync(content)
        self:get_device()

        if self._device == 'Mobile' or self._device == 'Unknown' then
            self:get_screen_scale()
            UIScale.Scale = self._ui_scale
    
            Connections['ui_scale'] = workspace.CurrentCamera:GetPropertyChangedSignal('ViewportSize'):Connect(function()
                self:get_screen_scale()
                UIScale.Scale = self._ui_scale
            end)
        end
    
        TweenService:Create(Container, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
            Size = UDim2.fromOffset(698, 479)
        }):Play()

        AcrylicBlur.new(Container)
        self._ui_loaded = true
    end

    function self:update_tabs(tab: TextButton)
        for index, object in Tabs:GetChildren() do
            if object.Name ~= 'Tab' then
                continue
            end

            if object == tab then
                if object.BackgroundTransparency ~= 0.5 then
                    local offset = object.LayoutOrder * (0.113 / 1.3)

                    TweenService:Create(Pin, TweenInfo.new(0.7, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Position = UDim2.fromScale(0.026, 0.135 + offset)
                    }):Play()    

                    TweenService:Create(object, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        BackgroundTransparency = 0.7
                    }):Play()

                    TweenService:Create(object.TextLabel, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        TextTransparency = 0.2,
                        TextColor3 = Color3.fromRGB(153, 68, 0)
                    }):Play()

                    TweenService:Create(object.TextLabel.UIGradient, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Offset = Vector2.new(1, 0)
                    }):Play()

                    TweenService:Create(object.Icon, TweenInfo.new(3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        ImageTransparency = 0.2,
                        ImageColor3 = Color3.fromRGB(153, 68, 0)
                    }):Play()
                end

                continue
            end

            if object.BackgroundTransparency ~= 1 then
                TweenService:Create(object, TweenInfo.new(2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                    BackgroundTransparency = 1
                }):Play()
                
                TweenService:Create(object.TextLabel, TweenInfo.new(2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                    TextTransparency = 0.7,
                    TextColor3 = Color3.fromRGB(255, 255, 255)
                }):Play()

                TweenService:Create(object.TextLabel.UIGradient, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                    Offset = Vector2.new(0, 0)
                }):Play()

                TweenService:Create(object.Icon, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                    ImageTransparency = 0.8,
                    ImageColor3 = Color3.fromRGB(255, 255, 255)
                }):Play()
            end
        end
    end

    function self:update_sections(left_section: ScrollingFrame, right_section: ScrollingFrame)
        for _, object in Sections:GetChildren() do
            if object == left_section or object == right_section then
                object.Visible = true

                continue
            end

            object.Visible = false
        end
    end

    function self:create_tab(title: string, icon: string)
        local TabManager = {}

        local LayoutOrder = 0;

        local font_params = Instance.new('GetTextBoundsParams')
        font_params.Text = title
        font_params.Font = Font.new('rbxasset://fonts/families/GothamSSm.json', Enum.FontWeight.SemiBold, Enum.FontStyle.Normal)
        font_params.Size = 13
        font_params.Width = 10000

        local font_size = TextService:GetTextBoundsAsync(font_params)
        local first_tab = not Tabs:FindFirstChild('Tab')

        local Tab = Instance.new('TextButton')
        Tab.FontFace = Font.new('rbxasset://fonts/families/SourceSansPro.json', Enum.FontWeight.Regular, Enum.FontStyle.Normal)
        Tab.TextColor3 = Color3.fromRGB(51, 8, 0)
        Tab.BorderColor3 = Color3.fromRGB(51, 8, 0)
        Tab.Text = ''
        Tab.AutoButtonColor = false
        Tab.BackgroundTransparency = 1
        Tab.Name = 'Tab'
        Tab.Size = UDim2.new(0, 129, 0, 38)
        Tab.BorderSizePixel = 0
        Tab.TextSize = 14
        Tab.BackgroundColor3 = Color3.fromRGB(102, 34, 0)
        Tab.Parent = Tabs
        Tab.LayoutOrder = self._tab
        
        local UICorner = Instance.new('UICorner')
        UICorner.CornerRadius = UDim.new(0, 5)
        UICorner.Parent = Tab
        
        local TextLabel = Instance.new('TextLabel')
        TextLabel.FontFace = Font.new('rbxasset://fonts/families/GothamSSm.json', Enum.FontWeight.SemiBold, Enum.FontStyle.Normal)
        TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        TextLabel.TextTransparency = 0.7 
        TextLabel.Text = title
        TextLabel.Size = UDim2.new(0, font_size.X, 0, 16)
        TextLabel.AnchorPoint = Vector2.new(0, 0.5)
        TextLabel.Position = UDim2.new(0.2400001734495163, 0, 0.5, 0)
        TextLabel.BackgroundTransparency = 1
        TextLabel.TextXAlignment = Enum.TextXAlignment.Left
        TextLabel.BorderSizePixel = 0
        TextLabel.BorderColor3 = Color3.fromRGB(51, 8, 0)
        TextLabel.TextSize = 13
        TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        TextLabel.Parent = Tab
        
        local UIGradient = Instance.new('UIGradient')
        UIGradient.Color = ColorSequence.new{
            ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
            ColorSequenceKeypoint.new(0.7, Color3.fromRGB(153, 68, 0)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(51, 8, 0))
        }
        UIGradient.Parent = TextLabel
        
        local Icon = Instance.new('ImageLabel')
        Icon.ScaleType = Enum.ScaleType.Fit
        Icon.ImageTransparency = 0.800000011920929
        Icon.BorderColor3 = Color3.fromRGB(51, 8, 0)
        Icon.AnchorPoint = Vector2.new(0, 0.5)
        Icon.BackgroundTransparency = 1
        Icon.Position = UDim2.new(0.10000000149011612, 0, 0.5, 0)
        Icon.Name = 'Icon'
        Icon.Image = icon
        Icon.Size = UDim2.new(0, 16, 0, 16)
        Icon.BorderSizePixel = 0
        Icon.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        Icon.Parent = Tab

        local LeftSection = Instance.new('ScrollingFrame')
        LeftSection.Name = 'LeftSection'
        LeftSection.AutomaticCanvasSize = Enum.AutomaticSize.XY
        LeftSection.ScrollBarThickness = 0
        LeftSection.Size = UDim2.new(0, 243, 0, 445)
        LeftSection.Selectable = false
        LeftSection.AnchorPoint = Vector2.new(0, 0.5)
        LeftSection.ScrollBarImageTransparency = 1
        LeftSection.BackgroundTransparency = 1
        LeftSection.Position = UDim2.new(0.2594326436519623, 0, 0.5, 0)
        LeftSection.BorderColor3 = Color3.fromRGB(51, 8, 0)
        LeftSection.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        LeftSection.BorderSizePixel = 0
        LeftSection.CanvasSize = UDim2.new(0, 0, 0.5, 0)
        LeftSection.Visible = false
        LeftSection.Parent = Sections
        
        local UIListLayout = Instance.new('UIListLayout')
        UIListLayout.Padding = UDim.new(0, 11)
        UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
        UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
        UIListLayout.Parent = LeftSection
        
        local UIPadding = Instance.new('UIPadding')
        UIPadding.PaddingTop = UDim.new(0, 1)
        UIPadding.Parent = LeftSection

        local RightSection = Instance.new('ScrollingFrame')
        RightSection.Name = 'RightSection'
        RightSection.AutomaticCanvasSize = Enum.AutomaticSize.XY
        RightSection.ScrollBarThickness = 0
        RightSection.Size = UDim2.new(0, 243, 0, 445)
        RightSection.Selectable = false
        RightSection.AnchorPoint = Vector2.new(0, 0.5)
        RightSection.ScrollBarImageTransparency = 1
        RightSection.BackgroundTransparency = 1
        RightSection.Position = UDim2.new(0.6290000081062317, 0, 0.5, 0)
        RightSection.BorderColor3 = Color3.fromRGB(51, 8, 0)
        RightSection.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        RightSection.BorderSizePixel = 0
        RightSection.CanvasSize = UDim2.new(0, 0, 0.5, 0)
        RightSection.Visible = false
        RightSection.Parent = Sections
        
        local UIListLayout = Instance.new('UIListLayout')
        UIListLayout.Padding = UDim.new(0, 11)
        UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
        UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
        UIListLayout.Parent = RightSection
        
        local UIPadding = Instance.new('UIPadding')
        UIPadding.PaddingTop = UDim.new(0, 1)
        UIPadding.Parent = RightSection

        self._tab += 1

        if first_tab then
            self:update_tabs(Tab, LeftSection, RightSection)
            self:update_sections(LeftSection, RightSection)
        end

        Tab.MouseButton1Click:Connect(function()
            self:update_tabs(Tab, LeftSection, RightSection)
            self:update_sections(LeftSection, RightSection)
        end)

        function TabManager:create_module(settings: any)

            local LayoutOrderModule = 0;

            local ModuleManager = {
                _state = false,
                _size = 0,
                _multiplier = 0
            }

            if settings.section == 'right' then
                settings.section = RightSection
            else
                settings.section = LeftSection
            end

            local Module = Instance.new('Frame')
            Module.ClipsDescendants = true
            Module.BorderColor3 = Color3.fromRGB(51, 8, 0)
            Module.BackgroundTransparency = 0.2
            Module.Position = UDim2.new(0.004115226212888956, 0, 0, 0)
            Module.Name = 'Module'
            Module.Size = UDim2.new(0, 241, 0, 93)
            Module.BorderSizePixel = 0
            Module.BackgroundColor3 = Color3.fromRGB(51, 8, 0)
            Module.Parent = settings.section

            local UIListLayout = Instance.new('UIListLayout')
            UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
            UIListLayout.Parent = Module
            
            local UICorner = Instance.new('UICorner')
            UICorner.CornerRadius = UDim.new(0, 5)
            UICorner.Parent = Module
            
            local UIStroke = Instance.new('UIStroke')
            UIStroke.Color = Color3.fromRGB(128, 51, 0)
            UIStroke.Transparency = 0.5
            UIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
            UIStroke.Parent = Module
            
            local Header = Instance.new('TextButton')
            Header.FontFace = Font.new('rbxasset://fonts/families/SourceSansPro.json', Enum.FontWeight.Regular, Enum.FontStyle.Normal)
            Header.TextColor3 = Color3.fromRGB(51, 8, 0)
            Header.BorderColor3 = Color3.fromRGB(51, 8, 0)
            Header.Text = ''
            Header.AutoButtonColor = false
            Header.BackgroundTransparency = 1
            Header.Name = 'Header'
            Header.Size = UDim2.new(0, 241, 0, 93)
            Header.BorderSizePixel = 0
            Header.TextSize = 14
            Header.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Header.Parent = Module
            
            local Icon = Instance.new('ImageLabel')
            Icon.ImageColor3 = Color3.fromRGB(153, 68, 0)
            Icon.ScaleType = Enum.ScaleType.Fit
            Icon.ImageTransparency = 0.699999988079071
            Icon.BorderColor3 = Color3.fromRGB(51, 8, 0)
            Icon.AnchorPoint = Vector2.new(0, 0.5)
            Icon.Image = 'rbxassetid://79095934438045'
            Icon.BackgroundTransparency = 1
            Icon.Position = UDim2.new(0.07100000232458115, 0, 0.8199999928474426, 0)
            Icon.Name = 'Icon'
            Icon.Size = UDim2.new(0, 15, 0, 15)
            Icon.BorderSizePixel = 0
            Icon.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Icon.Parent = Header
            
            local ModuleName = Instance.new('TextLabel')
            ModuleName.FontFace = Font.new('rbxasset://fonts/families/GothamSSm.json', Enum.FontWeight.SemiBold, Enum.FontStyle.Normal)
            ModuleName.TextColor3 = Color3.fromRGB(153, 68, 0)
            ModuleName.TextTransparency = 0.20000000298023224
            if not settings.rich then
                ModuleName.Text = settings.title or "Skibidi"
            else
                ModuleName.RichText = true
                ModuleName.Text = settings.richtext or "<font color='rgb(255,0,0)'>click</font> user"
            end;
            ModuleName.Name = 'ModuleName'
            ModuleName.Size = UDim2.new(0, 205, 0, 13)
            ModuleName.AnchorPoint = Vector2.new(0, 0.5)
            ModuleName.Position = UDim2.new(0.0729999989271164, 0, 0.23999999463558197, 0)
            ModuleName.BackgroundTransparency = 1
            ModuleName.TextXAlignment = Enum.TextXAlignment.Left
            ModuleName.BorderSizePixel = 0
            ModuleName.BorderColor3 = Color3.fromRGB(51, 8, 0)
            ModuleName.TextSize = 13
            ModuleName.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            ModuleName.Parent = Header
            
            local Description = Instance.new('TextLabel')
            Description.FontFace = Font.new('rbxasset://fonts/families/GothamSSm.json', Enum.FontWeight.SemiBold, Enum.FontStyle.Normal)
            Description.TextColor3 = Color3.fromRGB(153, 68, 0)
            Description.TextTransparency = 0.699999988079071
            Description.Text = settings.description
            Description.Name = 'Description'
            Description.Size = UDim2.new(0, 205, 0, 13)
            Description.AnchorPoint = Vector2.new(0, 0.5)
            Description.Position = UDim2.new(0.0729999989271164, 0, 0.41999998688697815, 0)
            Description.BackgroundTransparency = 1
            Description.TextXAlignment = Enum.TextXAlignment.Left
            Description.BorderSizePixel = 0
            Description.BorderColor3 = Color3.fromRGB(51, 8, 0)
            Description.TextSize = 10
            Description.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Description.Parent = Header
            
            local Toggle = Instance.new('Frame')
            Toggle.Name = 'Toggle'
            Toggle.BackgroundTransparency = 0.699999988079071
            Toggle.Position = UDim2.new(0.8199999928474426, 0, 0.7570000290870667, 0)
            Toggle.BorderColor3 = Color3.fromRGB(51, 8, 0)
            Toggle.Size = UDim2.new(0, 25, 0, 12)
            Toggle.BorderSizePixel = 0
            Toggle.BackgroundColor3 = Color3.fromRGB(128, 51, 0)
            Toggle.Parent = Header
            
            local UICorner = Instance.new('UICorner')
            UICorner.CornerRadius = UDim.new(1, 0)
            UICorner.Parent = Toggle
            
            local Circle = Instance.new('Frame')
            Circle.BorderColor3 = Color3.fromRGB(51, 8, 0)
            Circle.AnchorPoint = Vector2.new(0, 0.5)
            Circle.BackgroundTransparency = 0.40000000298023224
            Circle.Position = UDim2.new(0, 0, 0.5, 0)
            Circle.Name = 'Circle'
            Circle.Size = UDim2.new(0, 12, 0, 12)
            Circle.BorderSizePixel = 0
            Circle.BackgroundColor3 = Color3.fromRGB(128, 51, 0)
            Circle.Parent = Toggle
            
            local UICorner = Instance.new('UICorner')
            UICorner.CornerRadius = UDim.new(1, 0)
            UICorner.Parent = Circle
            
            local Keybind = Instance.new('Frame')
            Keybind.Name = 'Keybind'
            Keybind.BackgroundTransparency = 0.699999988079071
            Keybind.Position = UDim2.new(0.15000000596046448, 0, 0.7350000143051147, 0)
            Keybind.BorderColor3 = Color3.fromRGB(51, 8, 0)
            Keybind.Size = UDim2.new(0, 33, 0, 15)
            Keybind.BorderSizePixel = 0
            Keybind.BackgroundColor3 = Color3.fromRGB(153, 68, 0)
            Keybind.Parent = Header
            
            local UICorner = Instance.new('UICorner')
            UICorner.CornerRadius = UDim.new(0, 3)
            UICorner.Parent = Keybind
            
            local TextLabel = Instance.new('TextLabel')
            TextLabel.FontFace = Font.new('rbxasset://fonts/families/GothamSSm.json', Enum.FontWeight.SemiBold, Enum.FontStyle.Normal)
            TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
            TextLabel.BorderColor3 = Color3.fromRGB(51, 8, 0)
            TextLabel.Text = 'None'
            TextLabel.AnchorPoint = Vector2.new(0.5, 0.5)
            TextLabel.Size = UDim2.new(0, 25, 0, 13)
            TextLabel.BackgroundTransparency = 1
            TextLabel.TextXAlignment = Enum.TextXAlignment.Left
            TextLabel.Position = UDim2.new(0.5, 0, 0.5, 0)
            TextLabel.BorderSizePixel = 0
            TextLabel.TextSize = 10
            TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            TextLabel.Parent = Keybind
            
            local Divider = Instance.new('Frame')
            Divider.BorderColor3 = Color3.fromRGB(51, 8, 0)
            Divider.AnchorPoint = Vector2.new(0.5, 0)
            Divider.BackgroundTransparency = 0.5
            Divider.Position = UDim2.new(0.5, 0, 0.6200000047683716, 0)
            Divider.Name = 'Divider'
            Divider.Size = UDim2.new(0, 241, 0, 1)
            Divider.BorderSizePixel = 0
            Divider.BackgroundColor3 = Color3.fromRGB(51, 8, 0)
            Divider.Parent = Header
            
            local Divider = Instance.new('Frame')
            Divider.BorderColor3 = Color3.fromRGB(51, 8, 0)
            Divider.AnchorPoint = Vector2.new(0.5, 0)
            Divider.BackgroundTransparency = 0.5
            Divider.Position = UDim2.new(0.5, 0, 1, 0)
            Divider.Name = 'Divider'
            Divider.Size = UDim2.new(0, 241, 0, 1)
            Divider.BorderSizePixel = 0
            Divider.BackgroundColor3 = Color3.fromRGB(51, 8, 0)
            Divider.Parent = Header
            
            local Options = Instance.new('Frame')
            Options.Name = 'Options'
            Options.BackgroundTransparency = 1
            Options.Position = UDim2.new(0, 0, 1, 0)
            Options.BorderColor3 = Color3.fromRGB(51, 8, 0)
            Options.Size = UDim2.new(0, 241, 0, 8)
            Options.BorderSizePixel = 0
            Options.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Options.Parent = Module

            local UIPadding = Instance.new('UIPadding')
            UIPadding.PaddingTop = UDim.new(0, 8)
            UIPadding.Parent = Options

            local UIListLayout = Instance.new('UIListLayout')
            UIListLayout.Padding = UDim.new(0, 5)
            UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
            UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
            UIListLayout.Parent = Options

            function ModuleManager:change_state(state: boolean)
                self._state = state

                if self._state then
                    TweenService:Create(Module, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Size = UDim2.fromOffset(241, 93 + self._size + self._multiplier)
                    }):Play()

                    TweenService:Create(Toggle, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        BackgroundColor3 = Color3.fromRGB(128, 51, 0)
                    }):Play()

                    TweenService:Create(Circle, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        BackgroundColor3 = Color3.fromRGB(255, 140, 0),
                        Position = UDim2.fromScale(0.53, 0.5)
                    }):Play()
                else
                    TweenService:Create(Module, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Size = UDim2.fromOffset(241, 93)
                    }):Play()

                    TweenService:Create(Toggle, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        BackgroundColor3 = Color3.fromRGB(128, 51, 0)
                    }):Play()

                    TweenService:Create(Circle, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        BackgroundColor3 = Color3.fromRGB(128, 51, 0),
                        Position = UDim2.fromScale(0, 0.5)
                    }):Play()
                end

                Library._config._flags[settings.flag] = self._state
                Config:save(game.GameId, Library._config)

                settings.callback(self._state)
            end
            
            function ModuleManager:connect_keybind()
                if not Library._config._keybinds[settings.flag] then
                    return
                end

                Connections[settings.flag..'_keybind'] = UserInputService.InputBegan:Connect(function(input: InputObject, process: boolean)
                    if process then
                        return
                    end
                    
                    if tostring(input.KeyCode) ~= Library._config._keybinds[settings.flag] then
                        return
                    end
                    
                    self:change_state(not self._state)
                end)
            end

            function ModuleManager:scale_keybind(empty: boolean)
                if Library._config._keybinds[settings.flag] and not empty then
                    local keybind_string = string.gsub(tostring(Library._config._keybinds[settings.flag]), 'Enum.KeyCode.', '')

                    local font_params = Instance.new('GetTextBoundsParams')
                    font_params.Text = keybind_string
                    font_params.Font = Font.new('rbxasset://fonts/families/Montserrat.json', Enum.FontWeight.Bold)
                    font_params.Size = 10
                    font_params.Width = 10000
            
                    local font_size = TextService:GetTextBoundsAsync(font_params)
                    
                    Keybind.Size = UDim2.fromOffset(font_size.X + 6, 15)
                    TextLabel.Size = UDim2.fromOffset(font_size.X, 13)
                else
                    Keybind.Size = UDim2.fromOffset(31, 15)
                    TextLabel.Size = UDim2.fromOffset(25, 13)
                end
            end

            if Library:flag_type(settings.flag, 'boolean') then
                ModuleManager._state = true
                settings.callback(ModuleManager._state)

                Toggle.BackgroundColor3 = Color3.fromRGB(153, 68, 0)
                Circle.BackgroundColor3 = Color3.fromRGB(153, 68, 0)
                Circle.Position = UDim2.fromScale(0.53, 0.5)
            end

            if Library._config._keybinds[settings.flag] then
                local keybind_string = string.gsub(tostring(Library._config._keybinds[settings.flag]), 'Enum.KeyCode.', '')
                TextLabel.Text = keybind_string

                ModuleManager:connect_keybind()
                ModuleManager:scale_keybind()
            end

            Connections[settings.flag..'_input_began'] = Header.InputBegan:Connect(function(input: InputObject)
                if Library._choosing_keybind then
                    return
                end

                if input.UserInputType ~= Enum.UserInputType.MouseButton3 then
                    return
                end
                
                Library._choosing_keybind = true
                
                Connections['keybind_choose_start'] = UserInputService.InputBegan:Connect(function(input: InputObject, process: boolean)
                    if process then
                        return
                    end
                    
                    if input == Enum.UserInputState or input == Enum.UserInputType then
                        return
                    end

                    if input.KeyCode == Enum.KeyCode.Unknown then
                        return
                    end

                    if input.KeyCode == Enum.KeyCode.Backspace then
                        ModuleManager:scale_keybind(true)

                        Library._config._keybinds[settings.flag] = nil
                        Config:save(game.GameId, Library._config)

                        TextLabel.Text = 'None'
                        
                        if Connections[settings.flag..'_keybind'] then
                            Connections[settings.flag..'_keybind']:Disconnect()
                            Connections[settings.flag..'_keybind'] = nil
                        end

                        Connections['keybind_choose_start']:Disconnect()
                        Connections['keybind_choose_start'] = nil

                        Library._choosing_keybind = false

                        return
                    end
                    
                    Connections['keybind_choose_start']:Disconnect()
                    Connections['keybind_choose_start'] = nil
                    
                    Library._config._keybinds[settings.flag] = tostring(input.KeyCode)
                    Config:save(game.GameId, Library._config)

                    if Connections[settings.flag..'_keybind'] then
                        Connections[settings.flag..'_keybind']:Disconnect()
                        Connections[settings.flag..'_keybind'] = nil
                    end

                    ModuleManager:connect_keybind()
                    ModuleManager:scale_keybind()
                    
                    Library._choosing_keybind = false

                    local keybind_string = string.gsub(tostring(Library._config._keybinds[settings.flag]), 'Enum.KeyCode.', '')
                    TextLabel.Text = keybind_string
                end)
            end)

            Header.MouseButton1Click:Connect(function()
                ModuleManager:change_state(not ModuleManager._state)
            end)

            function ModuleManager:create_paragraph(settings: any)
                LayoutOrderModule = LayoutOrderModule + 1;

                local ParagraphManager = {}
                
                if self._size == 0 then
                    self._size = 11
                end
            
                self._size += settings.customScale or 70
            
                if ModuleManager._state then
                    Module.Size = UDim2.fromOffset(241, 93 + self._size)
                end
            
                Options.Size = UDim2.fromOffset(241, self._size)
            
                
                local Paragraph = Instance.new('Frame')
                Paragraph.BackgroundColor3 = Color3.fromRGB(51, 8, 0)
                Paragraph.BackgroundTransparency = 0.3
                Paragraph.Size = UDim2.new(0, 207, 0, 30) 
                Paragraph.BorderSizePixel = 0
                Paragraph.Name = "Paragraph"
                Paragraph.AutomaticSize = Enum.AutomaticSize.Y 
                Paragraph.Parent = Options
                Paragraph.LayoutOrder = LayoutOrderModule;
            
                local UICorner = Instance.new('UICorner')
                UICorner.CornerRadius = UDim.new(0, 4)
                UICorner.Parent = Paragraph
            
                
                local Title = Instance.new('TextLabel')
                Title.FontFace = Font.new('rbxasset://fonts/families/GothamSSm.json', Enum.FontWeight.SemiBold, Enum.FontStyle.Normal)
                Title.TextColor3 = Color3.fromRGB(255, 255, 255)
                Title.Text = settings.title or "Title"
                Title.Size = UDim2.new(1, -10, 0, 20)
                Title.Position = UDim2.new(0, 5, 0, 5)
                Title.BackgroundTransparency = 1
                Title.TextXAlignment = Enum.TextXAlignment.Left
                Title.TextYAlignment = Enum.TextYAlignment.Center
                Title.TextSize = 12
                Title.AutomaticSize = Enum.AutomaticSize.XY
                Title.Parent = Paragraph
            
               
                local Body = Instance.new('TextLabel')
                Body.FontFace = Font.new('rbxasset://fonts/families/GothamSSm.json', Enum.FontWeight.Regular, Enum.FontStyle.Normal)
                Body.TextColor3 = Color3.fromRGB(153, 68, 0)
                
                if not settings.rich then
                    Body.Text = settings.text or "Skibidi"
                else
                    Body.RichText = true
                    Body.Text = settings.richtext or "<font color='rgb(255,0,0)'>click</font> user"
                end
                
                Body.Size = UDim2.new(1, -10, 0, 20)
                Body.Position = UDim2.new(0, 5, 0, 30)
                Body.BackgroundTransparency = 1
                Body.TextXAlignment = Enum.TextXAlignment.Left
                Body.TextYAlignment = Enum.TextYAlignment.Top
                Body.TextSize = 11
                Body.TextWrapped = true
                Body.AutomaticSize = Enum.AutomaticSize.XY
                Body.Parent = Paragraph
            
                
                Paragraph.MouseEnter:Connect(function()
                    TweenService:Create(Paragraph, TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        BackgroundColor3 = Color3.fromRGB(51, 8, 0)
                    }):Play()
                end)
            
                Paragraph.MouseLeave:Connect(function()
                    TweenService:Create(Paragraph, TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        BackgroundColor3 = Color3.fromRGB(51, 8, 0)
                    }):Play()
                end)

                return ParagraphManager
            end

            function ModuleManager:create_text(settings: any)
                LayoutOrderModule = LayoutOrderModule + 1
            
                local TextManager = {}
            
                if self._size == 0 then
                    self._size = 11
                end
            
                self._size += settings.customScale or 50 
            
                if ModuleManager._state then
                    Module.Size = UDim2.fromOffset(241, 93 + self._size)
                end
            
                Options.Size = UDim2.fromOffset(241, self._size)
            
              
                local TextFrame = Instance.new('Frame')
                TextFrame.BackgroundColor3 = Color3.fromRGB(51, 8, 0)
                TextFrame.BackgroundTransparency = 0.3
                TextFrame.Size = UDim2.new(0, 207, 0, settings.CustomYSize)
                TextFrame.BorderSizePixel = 0
                TextFrame.Name = "Text"
                TextFrame.AutomaticSize = Enum.AutomaticSize.Y 
                TextFrame.Parent = Options
                TextFrame.LayoutOrder = LayoutOrderModule
            
                local UICorner = Instance.new('UICorner')
                UICorner.CornerRadius = UDim.new(0, 4)
                UICorner.Parent = TextFrame
            
                
                local Body = Instance.new('TextLabel')
                Body.FontFace = Font.new('rbxasset://fonts/families/GothamSSm.json', Enum.FontWeight.Regular, Enum.FontStyle.Normal)
                Body.TextColor3 = Color3.fromRGB(153, 68, 0)
            
                if not settings.rich then
                    Body.Text = settings.text or "Skibidi" 
                else
                    Body.RichText = true
                    Body.Text = settings.richtext or "<font color='rgb(255,0,0)'>click</font> user" 
                end
            
                Body.Size = UDim2.new(1, -10, 1, 0)
                Body.Position = UDim2.new(0, 5, 0, 5)
                Body.BackgroundTransparency = 1
                Body.TextXAlignment = Enum.TextXAlignment.Left
                Body.TextYAlignment = Enum.TextYAlignment.Top
                Body.TextSize = 10
                Body.TextWrapped = true
                Body.AutomaticSize = Enum.AutomaticSize.XY
                Body.Parent = TextFrame
            
               
                TextFrame.MouseEnter:Connect(function()
                    TweenService:Create(TextFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        BackgroundColor3 = Color3.fromRGB(51, 8, 0)
                    }):Play()
                end)
            
                TextFrame.MouseLeave:Connect(function()
                    TweenService:Create(TextFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        BackgroundColor3 = Color3.fromRGB(51, 8, 0)
                    }):Play()
                end)

                function TextManager:Set(new_settings)
                    if not new_settings.rich then
                        Body.Text = new_settings.text or "Skibidi"
                    else
                        Body.RichText = true
                        Body.Text = new_settings.richtext or "<font color='rgb(255,0,0)'>click</font> user"
                    end
                end;
            
                return TextManager
            end
            function ModuleManager:create_textbox(settings: any)
                LayoutOrderModule = LayoutOrderModule + 1
            
                local TextboxManager = {
                    _text = ""
                }
            
                if self._size == 0 then
                    self._size = 11
                end
            
                self._size += 32
            
                if ModuleManager._state then
                    Module.Size = UDim2.fromOffset(241, 93 + self._size)
                end
            
                Options.Size = UDim2.fromOffset(241, self._size)
            
                local Label = Instance.new('TextLabel')
                Label.FontFace = Font.new('rbxasset://fonts/families/GothamSSm.json', Enum.FontWeight.SemiBold, Enum.FontStyle.Normal)
                Label.TextColor3 = Color3.fromRGB(255, 255, 255)
                Label.TextTransparency = 0.2
                Label.Text = settings.title or "Enter text"
                Label.Size = UDim2.new(0, 207, 0, 13)
                Label.AnchorPoint = Vector2.new(0, 0)
                Label.Position = UDim2.new(0, 0, 0, 0)
                Label.BackgroundTransparency = 1
                Label.TextXAlignment = Enum.TextXAlignment.Left
                Label.BorderSizePixel = 0
                Label.Parent = Options
                Label.TextSize = 10;
                Label.LayoutOrder = LayoutOrderModule
            
                local Textbox = Instance.new('TextBox')
                Textbox.FontFace = Font.new('rbxasset://fonts/families/SourceSansPro.json', Enum.FontWeight.Regular, Enum.FontStyle.Normal)
                Textbox.TextColor3 = Color3.fromRGB(255, 255, 255)
                Textbox.BorderColor3 = Color3.fromRGB(51, 8, 0)
                Textbox.PlaceholderText = settings.placeholder or "Enter text..."
                Textbox.Text = Library._config._flags[settings.flag] or ""
                Textbox.Name = 'Textbox'
                Textbox.Size = UDim2.new(0, 207, 0, 15)
                Textbox.BorderSizePixel = 0
                Textbox.TextSize = 10
                Textbox.BackgroundColor3 = Color3.fromRGB(153, 68, 0)
                Textbox.BackgroundTransparency = 0.9
                Textbox.ClearTextOnFocus = false
                Textbox.Parent = Options
                Textbox.LayoutOrder = LayoutOrderModule
            
                local UICorner = Instance.new('UICorner')
                UICorner.CornerRadius = UDim.new(0, 4)
                UICorner.Parent = Textbox
            
                function TextboxManager:update_text(text: string)
                    self._text = text
                    Library._config._flags[settings.flag] = self._text
                    Config:save(game.GameId, Library._config)
                    settings.callback(self._text)
                end
            
                if Library:flag_type(settings.flag, 'string') then
                    TextboxManager:update_text(Library._config._flags[settings.flag])
                end
            
                Textbox.FocusLost:Connect(function()
                    TextboxManager:update_text(Textbox.Text)
                end)
            
                return TextboxManager
            end   

            function ModuleManager:create_checkbox(settings: any)
                LayoutOrderModule = LayoutOrderModule + 1
                local CheckboxManager = { _state = false }
            
                if self._size == 0 then
                    self._size = 11
                end
                self._size += 20
            
                if ModuleManager._state then
                    Module.Size = UDim2.fromOffset(241, 93 + self._size)
                end
                Options.Size = UDim2.fromOffset(241, self._size)
            
                local Checkbox = Instance.new("TextButton")
                Checkbox.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal)
                Checkbox.TextColor3 = Color3.fromRGB(51, 8, 0)
                Checkbox.BorderColor3 = Color3.fromRGB(51, 8, 0)
                Checkbox.Text = ""
                Checkbox.AutoButtonColor = false
                Checkbox.BackgroundTransparency = 1
                Checkbox.Name = "Checkbox"
                Checkbox.Size = UDim2.new(0, 207, 0, 15)
                Checkbox.BorderSizePixel = 0
                Checkbox.TextSize = 14
                Checkbox.BackgroundColor3 = Color3.fromRGB(51, 8, 0)
                Checkbox.Parent = Options
                Checkbox.LayoutOrder = LayoutOrderModule
            
                local TitleLabel = Instance.new("TextLabel")
                TitleLabel.Name = "TitleLabel"
                if SelectedLanguage == "th" then
                    TitleLabel.FontFace = Font.new("rbxasset://fonts/families/NotoSansThai.json", Enum.FontWeight.SemiBold, Enum.FontStyle.Normal)
                    TitleLabel.TextSize = 13
                else
                    TitleLabel.FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json", Enum.FontWeight.SemiBold, Enum.FontStyle.Normal)
                    TitleLabel.TextSize = 11
                end
                TitleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                TitleLabel.TextTransparency = 0.2
                TitleLabel.Text = settings.title or "Skibidi"
                TitleLabel.Size = UDim2.new(0, 142, 0, 13)
                TitleLabel.AnchorPoint = Vector2.new(0, 0.5)
                TitleLabel.Position = UDim2.new(0, 0, 0.5, 0)
                TitleLabel.BackgroundTransparency = 1
                TitleLabel.TextXAlignment = Enum.TextXAlignment.Left
                TitleLabel.Parent = Checkbox

                local KeybindBox = Instance.new("Frame")
                KeybindBox.Name = "KeybindBox"
                KeybindBox.Size = UDim2.fromOffset(14, 14)
                KeybindBox.Position = UDim2.new(1, -35, 0.5, 0)
                KeybindBox.AnchorPoint = Vector2.new(0, 0.5)
                KeybindBox.BackgroundColor3 = Color3.fromRGB(153, 68, 0)
                KeybindBox.BorderSizePixel = 0
                KeybindBox.Parent = Checkbox
            
                local KeybindCorner = Instance.new("UICorner")
                KeybindCorner.CornerRadius = UDim.new(0, 4)
                KeybindCorner.Parent = KeybindBox
            
                local KeybindLabel = Instance.new("TextLabel")
                KeybindLabel.Name = "KeybindLabel"
                KeybindLabel.Size = UDim2.new(1, 0, 1, 0)
                KeybindLabel.BackgroundTransparency = 1
                KeybindLabel.TextColor3 = Color3.fromRGB(51, 8, 0)
                KeybindLabel.TextScaled = false
                KeybindLabel.TextSize = 10
                KeybindLabel.Font = Enum.Font.SourceSans
                KeybindLabel.Text = Library._config._keybinds[settings.flag] 
                    and string.gsub(tostring(Library._config._keybinds[settings.flag]), "Enum.KeyCode.", "") 
                    or "..."
                KeybindLabel.Parent = KeybindBox
            
                local Box = Instance.new("Frame")
                Box.BorderColor3 = Color3.fromRGB(51, 8, 0)
                Box.AnchorPoint = Vector2.new(1, 0.5)
                Box.BackgroundTransparency = 0.9
                Box.Position = UDim2.new(1, 0, 0.5, 0)
                Box.Name = "Box"
                Box.Size = UDim2.new(0, 15, 0, 15)
                Box.BorderSizePixel = 0
                Box.BackgroundColor3 = Color3.fromRGB(153, 68, 0)
                Box.Parent = Checkbox
            
                local BoxCorner = Instance.new("UICorner")
                BoxCorner.CornerRadius = UDim.new(0, 4)
                BoxCorner.Parent = Box
            
                local Fill = Instance.new("Frame")
                Fill.AnchorPoint = Vector2.new(0.5, 0.5)
                Fill.BackgroundTransparency = 0.4
                Fill.Position = UDim2.new(0.5, 0, 0.5, 0)
                Fill.BorderColor3 = Color3.fromRGB(51, 8, 0)
                Fill.Name = "Fill"
                Fill.BorderSizePixel = 0
                Fill.BackgroundColor3 = Color3.fromRGB(153, 68, 0)
                Fill.Parent = Box
            
                local FillCorner = Instance.new("UICorner")
                FillCorner.CornerRadius = UDim.new(0, 3)
                FillCorner.Parent = Fill
            
                function CheckboxManager:change_state(state: boolean)
                    self._state = state
                    if self._state then
                        TweenService:Create(Box, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                            BackgroundTransparency = 0.7
                        }):Play()
                        TweenService:Create(Fill, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                            Size = UDim2.fromOffset(9, 9)
                        }):Play()
                    else
                        TweenService:Create(Box, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                            BackgroundTransparency = 0.9
                        }):Play()
                        TweenService:Create(Fill, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                            Size = UDim2.fromOffset(0, 0)
                        }):Play()
                    end
                    Library._config._flags[settings.flag] = self._state
                    Config:save(game.GameId, Library._config)
                    settings.callback(self._state)
                end
            
                if Library:flag_type(settings.flag, "boolean") then
                    CheckboxManager:change_state(Library._config._flags[settings.flag])
                end
            
                Checkbox.MouseButton1Click:Connect(function()
                    CheckboxManager:change_state(not CheckboxManager._state)
                end)
            
                Checkbox.InputBegan:Connect(function(input, gameProcessed)
                    if gameProcessed then return end
                    if input.UserInputType ~= Enum.UserInputType.MouseButton3 then return end
                    if Library._choosing_keybind then return end
            
                    Library._choosing_keybind = true
                    local chooseConnection
                    chooseConnection = UserInputService.InputBegan:Connect(function(keyInput, processed)
                        if processed then return end
                        if keyInput.UserInputType ~= Enum.UserInputType.Keyboard then return end
                        if keyInput.KeyCode == Enum.KeyCode.Unknown then return end
            
                        if keyInput.KeyCode == Enum.KeyCode.Backspace then
                            ModuleManager:scale_keybind(true)
                            Library._config._keybinds[settings.flag] = nil
                            Config:save(game.GameId, Library._config)
                            KeybindLabel.Text = "..."
                            if Connections[settings.flag .. "_keybind"] then
                                Connections[settings.flag .. "_keybind"]:Disconnect()
                                Connections[settings.flag .. "_keybind"] = nil
                            end
                            chooseConnection:Disconnect()
                            Library._choosing_keybind = false
                            return
                        end
            
                        chooseConnection:Disconnect()
                        Library._config._keybinds[settings.flag] = tostring(keyInput.KeyCode)
                        Config:save(game.GameId, Library._config)
                        if Connections[settings.flag .. "_keybind"] then
                            Connections[settings.flag .. "_keybind"]:Disconnect()
                            Connections[settings.flag .. "_keybind"] = nil
                        end
                        ModuleManager:connect_keybind()
                        ModuleManager:scale_keybind()
                        Library._choosing_keybind = false
            
                        local keybind_string = string.gsub(tostring(Library._config._keybinds[settings.flag]), "Enum.KeyCode.", "")
                        KeybindLabel.Text = keybind_string
                    end)
                end)
            
                local keyPressConnection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
                    if gameProcessed then return end
                    if input.UserInputType == Enum.UserInputType.Keyboard then
                        local storedKey = Library._config._keybinds[settings.flag]
                        if storedKey and tostring(input.KeyCode) == storedKey then
                            CheckboxManager:change_state(not CheckboxManager._state)
                        end
                    end
                end)
                Connections[settings.flag .. "_keypress"] = keyPressConnection
            
                return CheckboxManager
            end

            function ModuleManager:create_divider(settings: any)
                
                LayoutOrderModule = LayoutOrderModule + 1;
            
                if self._size == 0 then
                    self._size = 11
                end
            
                self._size += 27
            
                if ModuleManager._state then
                    Module.Size = UDim2.fromOffset(241, 93 + self._size)
                end

                local dividerHeight = 1
                local dividerWidth = 207 
            
               
                local OuterFrame = Instance.new('Frame')
                OuterFrame.Size = UDim2.new(0, dividerWidth, 0, 20) 
                OuterFrame.BackgroundTransparency = 1 
                OuterFrame.Name = 'OuterFrame'
                OuterFrame.Parent = Options
                OuterFrame.LayoutOrder = LayoutOrderModule

                if settings and settings.showtopic then
                    local TextLabel = Instance.new('TextLabel')
                    TextLabel.FontFace = Font.new('rbxasset://fonts/families/GothamSSm.json', Enum.FontWeight.SemiBold, Enum.FontStyle.Normal)
                    TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255) 
                    TextLabel.TextTransparency = 0
                    TextLabel.Text = settings.title
                    TextLabel.Size = UDim2.new(0, 153, 0, 13)
                    TextLabel.Position = UDim2.new(0.5, 0, 0.501, 0)
                    TextLabel.BackgroundTransparency = 1
                    TextLabel.TextXAlignment = Enum.TextXAlignment.Center
                    TextLabel.BorderSizePixel = 0
                    TextLabel.AnchorPoint = Vector2.new(0.5,0.5)
                    TextLabel.BorderColor3 = Color3.fromRGB(51, 8, 0)
                    TextLabel.TextSize = 11
                    TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    TextLabel.ZIndex = 3;
                    TextLabel.TextStrokeTransparency = 0;
                    TextLabel.Parent = OuterFrame
                end;
                
                if not settings or settings and not settings.disableline then
                   
                    local Divider = Instance.new('Frame')
                    Divider.Size = UDim2.new(1, 0, 0, dividerHeight)
                    Divider.BackgroundColor3 = Color3.fromRGB(128, 51, 0) 
                    Divider.BorderSizePixel = 0
                    Divider.Name = 'Divider'
                    Divider.Parent = OuterFrame
                    Divider.ZIndex = 2;
                    Divider.Position = UDim2.new(0, 0, 0.5, -dividerHeight / 2) 
                
                   
                    local Gradient = Instance.new('UIGradient')
                    Gradient.Parent = Divider
                    Gradient.Color = ColorSequence.new({
                        ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),  
                        ColorSequenceKeypoint.new(0.5, Color3.fromRGB(255, 255, 255)), 
                        ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 255, 255, 0))  
                    })
                    Gradient.Transparency = NumberSequence.new({
                        NumberSequenceKeypoint.new(0, 1),   
                        NumberSequenceKeypoint.new(0.5, 0),
                        NumberSequenceKeypoint.new(1, 1)
                    })
                    Gradient.Rotation = 0 
                
                   
                    local UICorner = Instance.new('UICorner')
                    UICorner.CornerRadius = UDim.new(0, 2) 
                    UICorner.Parent = Divider

                end;
            
                return true;
            end
            
            function ModuleManager:create_slider(settings: any)

                LayoutOrderModule = LayoutOrderModule + 1

                local SliderManager = {}

                if self._size == 0 then
                    self._size = 11
                end

                self._size += 27

                if ModuleManager._state then
                    Module.Size = UDim2.fromOffset(241, 93 + self._size)
                end

                Options.Size = UDim2.fromOffset(241, self._size)

                local Slider = Instance.new('TextButton')
                Slider.FontFace = Font.new('rbxasset://fonts/families/SourceSansPro.json', Enum.FontWeight.Regular, Enum.FontStyle.Normal);
                Slider.TextSize = 14;
                Slider.TextColor3 = Color3.fromRGB(51, 8, 0)
                Slider.BorderColor3 = Color3.fromRGB(51, 8, 0)
                Slider.Text = ''
                Slider.AutoButtonColor = false
                Slider.BackgroundTransparency = 1
                Slider.Name = 'Slider'
                Slider.Size = UDim2.new(0, 207, 0, 22)
                Slider.BorderSizePixel = 0
                Slider.BackgroundColor3 = Color3.fromRGB(51, 8, 0)
                Slider.Parent = Options
                Slider.LayoutOrder = LayoutOrderModule
                
                local TextLabel = Instance.new('TextLabel')
                if GG.SelectedLanguage == "th" then
                    TextLabel.FontFace = Font.new("rbxasset://fonts/families/NotoSansThai.json", Enum.FontWeight.SemiBold, Enum.FontStyle.Normal)
                    TextLabel.TextSize = 13;
                else
                    TextLabel.FontFace = Font.new('rbxasset://fonts/families/GothamSSm.json', Enum.FontWeight.SemiBold, Enum.FontStyle.Normal)
                    TextLabel.TextSize = 11;
                end;
                TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                TextLabel.TextTransparency = 0.20000000298023224
                TextLabel.Text = settings.title
                TextLabel.Size = UDim2.new(0, 153, 0, 13)
                TextLabel.Position = UDim2.new(0, 0, 0.05000000074505806, 0)
                TextLabel.BackgroundTransparency = 1
                TextLabel.TextXAlignment = Enum.TextXAlignment.Left
                TextLabel.BorderSizePixel = 0
                TextLabel.BorderColor3 = Color3.fromRGB(51, 8, 0)
                TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                TextLabel.Parent = Slider
                
                local Drag = Instance.new('Frame')
                Drag.BorderColor3 = Color3.fromRGB(51, 8, 0)
                Drag.AnchorPoint = Vector2.new(0.5, 1)
                Drag.BackgroundTransparency = 0.8999999761581421
                Drag.Position = UDim2.new(0.5, 0, 0.949999988079071, 0)
                Drag.Name = 'Drag'
                Drag.Size = UDim2.new(0, 207, 0, 4)
                Drag.BorderSizePixel = 0
                Drag.BackgroundColor3 = Color3.fromRGB(153, 68, 0)
                Drag.Parent = Slider
                
                local UICorner = Instance.new('UICorner')
                UICorner.CornerRadius = UDim.new(1, 0)
                UICorner.Parent = Drag
                
                local Fill = Instance.new('Frame')
                Fill.BorderColor3 = Color3.fromRGB(51, 8, 0)
                Fill.AnchorPoint = Vector2.new(0, 0.5)
                Fill.BackgroundTransparency = 0.5
                Fill.Position = UDim2.new(0, 0, 0.5, 0)
                Fill.Name = 'Fill'
                Fill.Size = UDim2.new(0, 103, 0, 4)
                Fill.BorderSizePixel = 0
                Fill.BackgroundColor3 = Color3.fromRGB(153, 68, 0)
                Fill.Parent = Drag
                
                local UICorner = Instance.new('UICorner')
                UICorner.CornerRadius = UDim.new(0, 3)
                UICorner.Parent = Fill
                
                local UIGradient = Instance.new('UIGradient')
                UIGradient.Color = ColorSequence.new{
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
                    ColorSequenceKeypoint.new(1, Color3.fromRGB(51, 8, 0))
                }
                UIGradient.Parent = Fill
                
                local Circle = Instance.new('Frame')
                Circle.AnchorPoint = Vector2.new(1, 0.5)
                Circle.Name = 'Circle'
                Circle.Position = UDim2.new(1, 0, 0.5, 0)
                Circle.BorderColor3 = Color3.fromRGB(51, 8, 0)
                Circle.Size = UDim2.new(0, 6, 0, 6)
                Circle.BorderSizePixel = 0
                Circle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Circle.Parent = Fill
                
                local UICorner = Instance.new('UICorner')
                UICorner.CornerRadius = UDim.new(1, 0)
                UICorner.Parent = Circle
                
                local Value = Instance.new('TextLabel')
                Value.FontFace = Font.new('rbxasset://fonts/families/GothamSSm.json', Enum.FontWeight.SemiBold, Enum.FontStyle.Normal)
                Value.TextColor3 = Color3.fromRGB(255, 255, 255)
                Value.TextTransparency = 0.20000000298023224
                Value.Text = '50'
                Value.Name = 'Value'
                Value.Size = UDim2.new(0, 42, 0, 13)
                Value.AnchorPoint = Vector2.new(1, 0)
                Value.Position = UDim2.new(1, 0, 0, 0)
                Value.BackgroundTransparency = 1
                Value.TextXAlignment = Enum.TextXAlignment.Right
                Value.BorderSizePixel = 0
                Value.BorderColor3 = Color3.fromRGB(51, 8, 0)
                Value.TextSize = 10
                Value.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Value.Parent = Slider

                function SliderManager:set_percentage(percentage: number)
                    local rounded_number = 0

                    if settings.round_number then
                        rounded_number = math.floor(percentage)
                    else
                        rounded_number = math.floor(percentage * 10) / 10
                    end

                    percentage = (percentage - settings.minimum_value) / (settings.maximum_value - settings.minimum_value)
                    
                    local slider_size = math.clamp(percentage, 0.02, 1) * Drag.Size.X.Offset
                    local number_threshold = math.clamp(rounded_number, settings.minimum_value, settings.maximum_value)
    
                    Library._config._flags[settings.flag] = number_threshold
                    Value.Text = number_threshold
    
                    TweenService:Create(Fill, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Size = UDim2.fromOffset(slider_size, Drag.Size.Y.Offset)
                    }):Play()
    
                    settings.callback(number_threshold)
                end

                function SliderManager:update()
                    local mouse_position = (mouse.X - Drag.AbsolutePosition.X) / Drag.Size.X.Offset
                    local percentage = settings.minimum_value + (settings.maximum_value - settings.minimum_value) * mouse_position

                    self:set_percentage(percentage)
                end

                function SliderManager:input()
                    SliderManager:update()
    
                    Connections['slider_drag_'..settings.flag] = mouse.Move:Connect(function()
                        SliderManager:update()
                    end)
                    
                    Connections['slider_input_'..settings.flag] = UserInputService.InputEnded:Connect(function(input: InputObject, process: boolean)
                        if input.UserInputType ~= Enum.UserInputType.MouseButton1 and input.UserInputType ~= Enum.UserInputType.Touch then
                            return
                        end
    
                        Connections:disconnect('slider_drag_'..settings.flag)
                        Connections:disconnect('slider_input_'..settings.flag)

                        if not settings.ignoresaved then
                            Config:save(game.GameId, Library._config);
                        end;
                    end)
                end


                if Library:flag_type(settings.flag, 'number') then
                    if not settings.ignoresaved then
                        SliderManager:set_percentage(Library._config._flags[settings.flag]);
                    else
                        SliderManager:set_percentage(settings.value);
                    end;
                else
                    SliderManager:set_percentage(settings.value);
                end;
    
                Slider.MouseButton1Down:Connect(function()
                    SliderManager:input()
                end)

                return SliderManager
            end

            function ModuleManager:create_dropdown(settings: any)

                if not settings.Order then
                    LayoutOrderModule = LayoutOrderModule + 1;
                end;

                local DropdownManager = {
                    _state = false,
                    _size = 0
                }

                if not settings.Order then
                    if self._size == 0 then
                        self._size = 11
                    end

                    self._size += 44
                end;

                if not settings.Order then
                    if ModuleManager._state then
                        Module.Size = UDim2.fromOffset(241, 93 + self._size)
                    end
                    Options.Size = UDim2.fromOffset(241, self._size)
                end

                local Dropdown = Instance.new('TextButton')
                Dropdown.FontFace = Font.new('rbxasset://fonts/families/SourceSansPro.json', Enum.FontWeight.Regular, Enum.FontStyle.Normal)
                Dropdown.TextColor3 = Color3.fromRGB(51, 8, 0)
                Dropdown.BorderColor3 = Color3.fromRGB(51, 8, 0)
                Dropdown.Text = ''
                Dropdown.AutoButtonColor = false
                Dropdown.BackgroundTransparency = 1
                Dropdown.Name = 'Dropdown'
                Dropdown.Size = UDim2.new(0, 207, 0, 39)
                Dropdown.BorderSizePixel = 0
                Dropdown.TextSize = 14
                Dropdown.BackgroundColor3 = Color3.fromRGB(51, 8, 0)
                Dropdown.Parent = Options

                if not settings.Order then
                    Dropdown.LayoutOrder = LayoutOrderModule;
                else
                    Dropdown.LayoutOrder = settings.OrderValue;
                end;

                if not Library._config._flags[settings.flag] then
                    Library._config._flags[settings.flag] = {};
                end;
                
                local TextLabel = Instance.new('TextLabel')
                if GG.SelectedLanguage == "th" then
                    TextLabel.FontFace = Font.new("rbxasset://fonts/families/NotoSansThai.json", Enum.FontWeight.SemiBold, Enum.FontStyle.Normal)
                    TextLabel.TextSize = 13;
                else
                    TextLabel.FontFace = Font.new('rbxasset://fonts/families/GothamSSm.json', Enum.FontWeight.SemiBold, Enum.FontStyle.Normal);
                    TextLabel.TextSize = 11;
                end;
                TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                TextLabel.TextTransparency = 0.20000000298023224
                TextLabel.Text = settings.title
                TextLabel.Size = UDim2.new(0, 207, 0, 13)
                TextLabel.BackgroundTransparency = 1
                TextLabel.TextXAlignment = Enum.TextXAlignment.Left
                TextLabel.BorderSizePixel = 0
                TextLabel.BorderColor3 = Color3.fromRGB(51, 8, 0)
                TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                TextLabel.Parent = Dropdown
                
                local Box = Instance.new('Frame')
                Box.ClipsDescendants = true
                Box.BorderColor3 = Color3.fromRGB(51, 8, 0)
                Box.AnchorPoint = Vector2.new(0.5, 0)
                Box.BackgroundTransparency = 0.8999999761581421
                Box.Position = UDim2.new(0.5, 0, 1.2000000476837158, 0)
                Box.Name = 'Box'
                Box.Size = UDim2.new(0, 207, 0, 22)
                Box.BorderSizePixel = 0
                Box.BackgroundColor3 = Color3.fromRGB(153, 68, 0)
                Box.Parent = TextLabel
                
                local UICorner = Instance.new('UICorner')
                UICorner.CornerRadius = UDim.new(0, 4)
                UICorner.Parent = Box
                
                local Header = Instance.new('Frame')
                Header.BorderColor3 = Color3.fromRGB(51, 8, 0)
                Header.AnchorPoint = Vector2.new(0.5, 0)
                Header.BackgroundTransparency = 1
                Header.Position = UDim2.new(0.5, 0, 0, 0)
                Header.Name = 'Header'
                Header.Size = UDim2.new(0, 207, 0, 22)
                Header.BorderSizePixel = 0
                Header.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Header.Parent = Box
                
                local CurrentOption = Instance.new('TextLabel')
                CurrentOption.FontFace = Font.new('rbxasset://fonts/families/GothamSSm.json', Enum.FontWeight.SemiBold, Enum.FontStyle.Normal)
                CurrentOption.TextColor3 = Color3.fromRGB(255, 255, 255)
                CurrentOption.TextTransparency = 0.20000000298023224
                CurrentOption.Name = 'CurrentOption'
                CurrentOption.Size = UDim2.new(0, 161, 0, 13)
                CurrentOption.AnchorPoint = Vector2.new(0, 0.5)
                CurrentOption.Position = UDim2.new(0.04999988153576851, 0, 0.5, 0)
                CurrentOption.BackgroundTransparency = 1
                CurrentOption.TextXAlignment = Enum.TextXAlignment.Left
                CurrentOption.BorderSizePixel = 0
                CurrentOption.BorderColor3 = Color3.fromRGB(51, 8, 0)
                CurrentOption.TextSize = 10
                CurrentOption.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                CurrentOption.Parent = Header
                local UIGradient = Instance.new('UIGradient')
                UIGradient.Transparency = NumberSequence.new{
                    NumberSequenceKeypoint.new(0, 0),
                    NumberSequenceKeypoint.new(0.704, 0),
                    NumberSequenceKeypoint.new(0.872, 0.36250001192092896),
                    NumberSequenceKeypoint.new(1, 1)
                }
                UIGradient.Parent = CurrentOption
                
                local Arrow = Instance.new('ImageLabel')
                Arrow.BorderColor3 = Color3.fromRGB(51, 8, 0)
                Arrow.AnchorPoint = Vector2.new(0, 0.5)
                Arrow.Image = 'rbxassetid://84232453189324'
                Arrow.BackgroundTransparency = 1
                Arrow.Position = UDim2.new(0.9100000262260437, 0, 0.5, 0)
                Arrow.Name = 'Arrow'
                Arrow.Size = UDim2.new(0, 8, 0, 8)
                Arrow.BorderSizePixel = 0
                Arrow.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Arrow.Parent = Header
                
                local Options = Instance.new('ScrollingFrame')
                Options.ScrollBarImageColor3 = Color3.fromRGB(51, 8, 0)
                Options.Active = true
                Options.ScrollBarImageTransparency = 1
                Options.AutomaticCanvasSize = Enum.AutomaticSize.XY
                Options.ScrollBarThickness = 0
                Options.Name = 'Options'
                Options.Size = UDim2.new(0, 207, 0, 0)
                Options.BackgroundTransparency = 1
                Options.Position = UDim2.new(0, 0, 1, 0)
                Options.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Options.BorderColor3 = Color3.fromRGB(51, 8, 0)
                Options.BorderSizePixel = 0
                Options.CanvasSize = UDim2.new(0, 0, 0.5, 0)
                Options.Parent = Box
                
                local UIListLayout = Instance.new('UIListLayout')
                UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
                UIListLayout.Parent = Options
                
                local UIPadding = Instance.new('UIPadding')
                UIPadding.PaddingTop = UDim.new(0, -1)
                UIPadding.PaddingLeft = UDim.new(0, 10)
                UIPadding.Parent = Options
                
                local UIListLayout = Instance.new('UIListLayout')
                UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
                UIListLayout.Parent = Box

                function DropdownManager:update(option: string)
                    
                    if settings.multi_dropdown then
                     

                        if not Library._config._flags[settings.flag] then
                            Library._config._flags[settings.flag] = {};
                        end;

                        local CurrentTargetValue = nil;
                        
                        if #Library._config._flags[settings.flag] > 0 then

                            CurrentTargetValue = convertTableToString(Library._config._flags[settings.flag]);

                        end;

                        local selected = {}

                        if CurrentTargetValue then
                            for value in string.gmatch(CurrentTargetValue, "([^,]+)") do
                               
                                local trimmedValue = value:match("^%s*(.-)%s*$")  
                                
                              
                                if trimmedValue ~= "Label" then
                                    table.insert(selected, trimmedValue)
                                end
                            end
                        else
                            for value in string.gmatch(CurrentOption.Text, "([^,]+)") do
                             
                                local trimmedValue = value:match("^%s*(.-)%s*$") 
                                
                                
                                if trimmedValue ~= "Label" then
                                    table.insert(selected, trimmedValue)
                                end
                            end
                        end;
                
                        local CurrentTextGet = convertStringToTable(CurrentOption.Text);

                        optionSkibidi = "nil";
                        if typeof(option) ~= 'string' then
                            optionSkibidi = option.Name;
                        else
                            optionSkibidi = option;
                        end;

                        local found = false
                        for i, v in pairs(CurrentTextGet) do
                            if v == optionSkibidi then
                                table.remove(CurrentTextGet, i);
                                break;
                            end
                        end

                        CurrentOption.Text = table.concat(selected, ", ")
                        local OptionsChild = {}
                       
                        for _, object in Options:GetChildren() do
                            if object.Name == "Option" then
                                table.insert(OptionsChild, object.Text)
                                if table.find(selected, object.Text) then
                                    object.TextTransparency = 0.2
                                else
                                    object.TextTransparency = 0.6
                                end
                            end
                        end

                        CurrentTargetValue = convertStringToTable(CurrentOption.Text);

                        for _, v in CurrentTargetValue do
                            if not table.find(OptionsChild, v) and table.find(selected, v) then
                                table.remove(selected, _)
                            end;
                        end;

                        CurrentOption.Text = table.concat(selected, ", ");
                
                        Library._config._flags[settings.flag] = convertStringToTable(CurrentOption.Text);
                    else
                        
                        CurrentOption.Text = (typeof(option) == "string" and option) or option.Name
                        for _, object in Options:GetChildren() do
                            if object.Name == "Option" then
                                
                                if object.Text == CurrentOption.Text then
                                    object.TextTransparency = 0.2
                                else
                                    object.TextTransparency = 0.6
                                end
                            end
                        end
                        Library._config._flags[settings.flag] = option
                    end
                
                   
                    Config:save(game.GameId, Library._config)
                
                  
                    settings.callback(option)
                end
                
                local CurrentDropSizeState = 0;

                function DropdownManager:unfold_settings()
                    self._state = not self._state

                    if self._state then
                        ModuleManager._multiplier += self._size

                        CurrentDropSizeState = self._size;

                        TweenService:Create(Module, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                            Size = UDim2.fromOffset(241, 93 + ModuleManager._size + ModuleManager._multiplier)
                        }):Play()

                        TweenService:Create(Module.Options, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                            Size = UDim2.fromOffset(241, ModuleManager._size + ModuleManager._multiplier)
                        }):Play()

                        TweenService:Create(Dropdown, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                            Size = UDim2.fromOffset(207, 39 + self._size)
                        }):Play()

                        TweenService:Create(Box, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                            Size = UDim2.fromOffset(207, 22 + self._size)
                        }):Play()

                        TweenService:Create(Arrow, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                            Rotation = 180
                        }):Play()
                    else
                        ModuleManager._multiplier -= self._size

                        CurrentDropSizeState = 0;

                        TweenService:Create(Module, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                            Size = UDim2.fromOffset(241, 93 + ModuleManager._size + ModuleManager._multiplier)
                        }):Play()

                        TweenService:Create(Module.Options, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                            Size = UDim2.fromOffset(241, ModuleManager._size + ModuleManager._multiplier)
                        }):Play()

                        TweenService:Create(Dropdown, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                            Size = UDim2.fromOffset(207, 39)
                        }):Play()

                        TweenService:Create(Box, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                            Size = UDim2.fromOffset(207, 22)
                        }):Play()

                        TweenService:Create(Arrow, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                            Rotation = 0
                        }):Play()
                    end
                end

                if #settings.options > 0 then
                    DropdownManager._size = 3

                    for index, value in settings.options do
                        local Option = Instance.new('TextButton')
                        Option.FontFace = Font.new('rbxasset://fonts/families/GothamSSm.json', Enum.FontWeight.SemiBold, Enum.FontStyle.Normal)
                        Option.Active = false
                        Option.TextTransparency = 0.6000000238418579
                        Option.AnchorPoint = Vector2.new(0, 0.5)
                        Option.TextSize = 10
                        Option.Size = UDim2.new(0, 186, 0, 16)
                        Option.TextColor3 = Color3.fromRGB(255, 255, 255)
                        Option.BorderColor3 = Color3.fromRGB(51, 8, 0)
                        Option.Text = (typeof(value) == "string" and value) or value.Name;
                        Option.AutoButtonColor = false
                        Option.Name = 'Option'
                        Option.BackgroundTransparency = 1
                        Option.TextXAlignment = Enum.TextXAlignment.Left
                        Option.Selectable = false
                        Option.Position = UDim2.new(0.04999988153576851, 0, 0.34210526943206787, 0)
                        Option.BorderSizePixel = 0
                        Option.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                        Option.Parent = Options
                        
                        local UIGradient = Instance.new('UIGradient')
                        UIGradient.Transparency = NumberSequence.new{
                            NumberSequenceKeypoint.new(0, 0),
                            NumberSequenceKeypoint.new(0.704, 0),
                            NumberSequenceKeypoint.new(0.872, 0.36250001192092896),
                            NumberSequenceKeypoint.new(1, 1)
                        }
                        UIGradient.Parent = Option

                        Option.MouseButton1Click:Connect(function()
                            if not Library._config._flags[settings.flag] then
                                Library._config._flags[settings.flag] = {};
                            end;

                            if settings.multi_dropdown then
                                if table.find(Library._config._flags[settings.flag], value) then
                                    Library:remove_table_value(Library._config._flags[settings.flag], value)
                                else
                                    table.insert(Library._config._flags[settings.flag], value)
                                end
                            end

                            DropdownManager:update(value)
                        end)
    
                        if index > settings.maximum_options then
                            continue
                        end
    
                        DropdownManager._size += 16
                        Options.Size = UDim2.fromOffset(207, DropdownManager._size)
                    end
                end

                function DropdownManager:New(value)
                    Dropdown:Destroy(true);
                    value.OrderValue = Dropdown.LayoutOrder
                    ModuleManager._multiplier -= CurrentDropSizeState
                    return ModuleManager:create_dropdown(value)
                end;

                if Library:flag_type(settings.flag, 'string') then
                    DropdownManager:update(Library._config._flags[settings.flag])
                else
                    DropdownManager:update(settings.options[1])
                end
    
                Dropdown.MouseButton1Click:Connect(function()
                    DropdownManager:unfold_settings()
                end)

                return DropdownManager
            end

            function ModuleManager:create_feature(settings)

                local checked = false;
                
                LayoutOrderModule = LayoutOrderModule + 1
            
                if self._size == 0 then
                    self._size = 11
                end
            
                self._size += 20
            
                if ModuleManager._state then
                    Module.Size = UDim2.fromOffset(241, 93 + self._size);
                end
            
                Options.Size = UDim2.fromOffset(241, self._size);
            
                local FeatureContainer = Instance.new("Frame")
                FeatureContainer.Size = UDim2.new(0, 207, 0, 16)
                FeatureContainer.BackgroundTransparency = 1
                FeatureContainer.Parent = Options
                FeatureContainer.LayoutOrder = LayoutOrderModule
            
                local UIListLayout = Instance.new("UIListLayout")
                UIListLayout.FillDirection = Enum.FillDirection.Horizontal
                UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
                UIListLayout.Parent = FeatureContainer
            
                local FeatureButton = Instance.new("TextButton")
                FeatureButton.FontFace = Font.new('rbxasset://fonts/families/GothamSSm.json', Enum.FontWeight.SemiBold, Enum.FontStyle.Normal);
                FeatureButton.TextSize = 11;
                FeatureButton.Size = UDim2.new(1, -35, 0, 16)
                FeatureButton.BackgroundColor3 = Color3.fromRGB(51, 8, 0)
                FeatureButton.TextColor3 = Color3.fromRGB(255, 255, 255)
                FeatureButton.Text = "    " .. settings.title or "    " .. "Feature"
                FeatureButton.AutoButtonColor = false
                FeatureButton.TextXAlignment = Enum.TextXAlignment.Left
                FeatureButton.TextTransparency = 0.2
                FeatureButton.Parent = FeatureContainer
            
                local RightContainer = Instance.new("Frame")
                RightContainer.Size = UDim2.new(0, 45, 0, 16)
                RightContainer.BackgroundTransparency = 1
                RightContainer.Parent = FeatureContainer
            
                local RightLayout = Instance.new("UIListLayout")
                RightLayout.Padding = UDim.new(0.1, 0)
                RightLayout.FillDirection = Enum.FillDirection.Horizontal
                RightLayout.HorizontalAlignment = Enum.HorizontalAlignment.Right
                RightLayout.SortOrder = Enum.SortOrder.LayoutOrder
                RightLayout.Parent = RightContainer
            
                local KeybindBox = Instance.new("TextLabel")
                KeybindBox.FontFace = Font.new('rbxasset://fonts/families/GothamSSm.json', Enum.FontWeight.SemiBold, Enum.FontStyle.Normal);
                KeybindBox.Size = UDim2.new(0, 15, 0, 15)
                KeybindBox.BackgroundColor3 = Color3.fromRGB(153, 68, 0)
                KeybindBox.TextColor3 = Color3.fromRGB(255, 255, 255)
                KeybindBox.TextSize = 11
                KeybindBox.BackgroundTransparency = 1
                KeybindBox.LayoutOrder = 2;
                KeybindBox.Parent = RightContainer
            
                local KeybindButton = Instance.new("TextButton")
                KeybindButton.Size = UDim2.new(1, 0, 1, 0)
                KeybindButton.BackgroundTransparency = 1
                KeybindButton.TextTransparency = 1
                KeybindButton.Parent = KeybindBox

                local CheckboxCorner = Instance.new("UICorner", KeybindBox)
                CheckboxCorner.CornerRadius = UDim.new(0, 3)

                local UIStroke = Instance.new("UIStroke", KeybindBox)
                UIStroke.Color = Color3.fromRGB(153, 68, 0)
                UIStroke.Thickness = 1
                UIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
            
                if not Library._config._flags then
                    Library._config._flags = {}
                end
            
                if not Library._config._flags[settings.flag] then
                    Library._config._flags[settings.flag] = {
                        checked = false,
                        BIND = settings.default or "Unknown"
                    }
                end
            
                checked = Library._config._flags[settings.flag].checked
                KeybindBox.Text = Library._config._flags[settings.flag].BIND

                if KeybindBox.Text == "Unknown" then
                    KeybindBox.Text = "..."
                end

                local UseF_Var = nil;
            
                if not settings.disablecheck then
                    local Checkbox = Instance.new("TextButton")
                    Checkbox.Size = UDim2.new(0, 15, 0, 15)
                    Checkbox.BackgroundColor3 = checked and Color3.fromRGB(153, 68, 0) or Color3.fromRGB(51, 8, 0)
                    Checkbox.Text = ""
                    Checkbox.Parent = RightContainer
                    Checkbox.LayoutOrder = 1;

                    local UIStroke = Instance.new("UIStroke", Checkbox)
                    UIStroke.Color = Color3.fromRGB(153, 68, 0)
                    UIStroke.Thickness = 1
                    UIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
                
                    local CheckboxCorner = Instance.new("UICorner")
                    CheckboxCorner.CornerRadius = UDim.new(0, 3)
                    CheckboxCorner.Parent = Checkbox
            
                    local function toggleState()
                        checked = not checked
                        Checkbox.BackgroundColor3 = checked and Color3.fromRGB(153, 68, 0) or Color3.fromRGB(51, 8, 0)
                        Library._config._flags[settings.flag].checked = checked
                        Config:save(game.GameId, Library._config)
                        if settings.callback then
                            settings.callback(checked)
                        end
                    end

                    UseF_Var = toggleState
                
                    Checkbox.MouseButton1Click:Connect(toggleState)

                else

                    UseF_Var = function()
                        settings.button_callback();
                    end;

                end;
            
                KeybindButton.MouseButton1Click:Connect(function()
                    KeybindBox.Text = "..."
                    local inputConnection
                    inputConnection = game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessed)
                        if gameProcessed then return end
                        if input.UserInputType == Enum.UserInputType.Keyboard then
                            local newKey = input.KeyCode.Name
                            Library._config._flags[settings.flag].BIND = newKey
                            if newKey ~= "Unknown" then
                                KeybindBox.Text = newKey;
                            end;
                            Config:save(game.GameId, Library._config) 
                            inputConnection:Disconnect()
                        elseif input.UserInputType == Enum.UserInputType.MouseButton3 then
                            Library._config._flags[settings.flag].BIND = "Unknown"
                            KeybindBox.Text = "..."
                            Config:save(game.GameId, Library._config)
                            inputConnection:Disconnect()
                        end
                    end)
                    Connections["keybind_input_" .. settings.flag] = inputConnection
                end)
            
                local keyPressConnection
                keyPressConnection = game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessed)
                    if gameProcessed then return end
                    if input.UserInputType == Enum.UserInputType.Keyboard then
                        if input.KeyCode.Name == Library._config._flags[settings.flag].BIND then
                            UseF_Var();
                        end
                    end
                end)
                Connections["keybind_press_" .. settings.flag] = keyPressConnection
            
                FeatureButton.MouseButton1Click:Connect(function()
                    if settings.button_callback then
                        settings.button_callback()
                    end
                end)

                if not settings.disablecheck then
                    settings.callback(checked);
                end;
            
                return FeatureContainer
            end                    

            return ModuleManager
        end

        return TabManager
    end

    Connections['library_visiblity'] = UserInputService.InputBegan:Connect(function(input: InputObject, process: boolean)
        if input.KeyCode ~= Enum.KeyCode.RightControl then
            return
        end

        self._ui_open = not self._ui_open
        self:change_visiblity(self._ui_open)
    end)

    self._ui.Container.Handler.Minimize.MouseButton1Click:Connect(function()
        self._ui_open = not self._ui_open
        self:change_visiblity(self._ui_open)
    end)

    return self
end


local main = Library.new()
repeat task.wait() until game:IsLoaded()
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")
local Debris = game:GetService("Debris")
local GuiService = game:GetService("GuiService")
local ContextActionService = game:GetService("ContextActionService")
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")
local Alive = Workspace:FindFirstChild("Alive")
local Aerodynamic = false
local AeroTime = tick()
local AeroDynamicDetected = false
local AeroDynamicTime = tick()
local LastInput = UserInputService:GetLastInputType()
local MouseLoc = nil
local GrabParry = nil
local Remotes = {}
local ParryRemotes = {}
local OriginalMetas = {}
local Parries = 0
local Connections = {}
local AnimStorage = {}
local CurrentAnim = nil
local AnimTrack = nil

local Parried = false
local LobbyParried = false
local Previous_Velocity = {}
local PeakVel = 0
local Randomized_ParryAccuracy = false
local Singularity_Detection = false
local Infinity_Detection = false
local CooldownProtection = false
local Death_Slash_Detection = false
local Speed_Divisor_Multiplier = 1.0
local DeathSlashDetection = false
local Infinity_Ball = false
local ParryCD = LocalPlayer.PlayerGui.Hotbar.Block.UIGradient
local LobbyParryType = "Keypress"
local AutoParryType = "Keypress"
local TriggerbotType = "Keypress"
local AutoSpamType = "Keypress"
local SpamMode = "Legit"
local Curve_Time = tick()
local Current_Anim_Track = nil
local Has_Parried_Once = false
local Previous_Positions = {}
local Lerp_Radians = 0
local Last_Warp_Time = tick()
local AntiPhantomEnabled = false
local Phantom = false
local Ball_Distance = 30
local Speed_Multiplier = 50
local Turn_Radius = 10
local Jump_Chance = 50
local Double_Jump_Chance = 20
local Can_Jump = false
local Is_Spamming = false
local Last_Spam_End_Time = 0
local Music = nil
local SelectedSong = "EEYUH!"
local MusicVolume = 5
local PredictedPositions = {}
local MaxPredictions = 5
local LastJumpTime = 0
local JumpCooldown = 2
local Spam_End_Time = 0
local KorbloxConnection = nil
local IsAutoSpamming = false
local Check_Refresh
local AntiAFKConnection
local PingHistory = {}
local MaxPingHistory = 3
local ClashStartTime = 0
local ClashEndTime = 0
local OriginalFaceTexture = nil
local HeadDecalConnection = nil
local LastAnimTime = 0
local SpamCoroutine = nil
local LastSpamTime = 0
local SpamDelay = 0.05
local LastClickTime = 0
local HighPingCompensation = false
local Tornado_Time = 0
local Use_Ability = ReplicatedStorage.Remotes.AbilityButtonPress
local Parry_Requirements = 0
local wasBackwards = {}
local KeypressAutoCurve = false
local SelectedParryType = "Camera"
local SelectedTriggerParryType = "Camera"
local KeypressCurveMethod = "Smooth"
local currentToTween = nil
local currentBackTween = nil
local HighPingProtection = false
local TriggerHighPingProtection = false
local TriggerSingularity_Detection = false
local TriggerInfinity_Detection = false
local TriggerDeathSlash_Detection = false
local AutoPostParry = false
local PostParryTarget = nil
local PostParryVelocityHistory = {}
local PostParryScheduled = {}
local selectedTarget = nil
local cameraLockConn = nil
local displayToChar = {}
local soundOptions = {
    ["EEYUH!"] = "rbxassetid://16190782181",
    ["Skibidi Toilet"] = "rbxassetid://122353792844213",
    ["DEKUD"] = "rbxassetid://124760595693133",
    ["Everybody Wants To Rule The World"] = "rbxassetid://87209527034670",
    ["CHWYKU"] = "rbxassetid://80796352391107",
    ["ULTCHILL FUNK"] = "rbxassetid://103283136727523",
    ["VEM VEM CHILL FUNK"] = "rbxassetid://70870883948497",
    ["Rat Dance Remake"] = "rbxassetid://133496635668044",
    ["tobreak"] = "rbxassetid://111557295232821",
    ["Rise to the Horizon"] = "rbxassetid://72573266268313",
    ["Echoes of the Candy Kingdom"] = "rbxassetid://103040477333590",
    ["Speed"] = "rbxassetid://125550253895893",
    ["Lo-fi Chill A"] = "rbxassetid://9043887091",
    ["Lo-fi Ambient"] = "rbxassetid://129775776987523",
    ["Tears in the Rain"] = "rbxassetid://129710845038263"
}
local function Update_Ping()
    local currentPing = game:GetService('Stats').Network.ServerStatsItem['Data Ping']:GetValue()
    table.insert(PingHistory, 1, currentPing)
    if #PingHistory > MaxPingHistory then
        table.remove(PingHistory, #PingHistory)
    end
end
local function GetAveragePing()
    if #PingHistory == 0 then return 0 end
    local sum = 0
    for _, ping in ipairs(PingHistory) do
        sum = sum + ping
    end
    return sum / #PingHistory
end
local function IsValidRemoteArgs(args)
    return #args == 7 and
           type(args[2]) == "string" and
           type(args[3]) == "number" and
           typeof(args[4]) == "CFrame" and
           type(args[5]) == "table" and
           type(args[6]) == "table" and
           type(args[7]) == "boolean"
end
local Is_Supported_Test = typeof(hookmetamethod) == "function"
local oldIndex
if Is_Supported_Test then
    oldIndex = hookmetamethod(game, "__index", newcclosure(function(self, key)
        if (key == "FireServer" and self:IsA("RemoteEvent")) or (key == "InvokeServer" and self:IsA("RemoteFunction")) then
            return function(_, ...)
                local args = {...}
                if IsValidRemoteArgs(args) then
                    if not ParryRemotes[self] then
                        ParryRemotes[self] = args
                    end
                end
                return oldIndex(self, key)(_, unpack(args))
            end
        end
        return oldIndex(self, key)
    end))
end
local function RestoreParryRemote()
    for remote, _ in pairs(ParryRemotes) do
        if OriginalMetas[getmetatable(remote)] then
            local meta = getrawmetatable(remote)
            setreadonly(meta, false)
            meta.__index = nil
            setreadonly(meta, true)
        end
    end
    ParryRemotes = {}
end
for _, anim in pairs(ReplicatedStorage.Misc.Emotes:GetChildren()) do
    if anim:IsA("Animation") and anim:GetAttribute("EmoteName") then
        AnimStorage[anim:GetAttribute("EmoteName")] = anim
    end
end
local AutoParry = {}
AutoParry.Previous_Positions = {}
AutoParry.Velocity_History = {}
AutoParry.Dot_Histories = {}
AutoParry.Previous_Speeds = {}
AutoParry.Distance_History = {}
AutoParry.Previous_Velocities = {}
AutoParry.ParryAnim = function(useGrabParryOnly)
    local ParryAnim
    if useGrabParryOnly then
        ParryAnim = Instance.new("Animation")
        ParryAnim.AnimationId = "rbxassetid://14909890816"
    else
        ParryAnim = ReplicatedStorage.Shared.SwordAPI.Collection.Default:FindFirstChild("GrabParry")
        if not ParryAnim then
            ParryAnim = Instance.new("Animation")
            ParryAnim.AnimationId = "rbxassetid://14909890816"
        end
    end
    local CurrentSword = LocalPlayer.Character:GetAttribute("CurrentlyEquippedSword")
    if not CurrentSword then return end
    local SwordData = ReplicatedStorage.Shared.ReplicatedInstances.Swords.GetSword:Invoke(CurrentSword)
    if not SwordData or not SwordData['AnimationType'] then return end
    for _, obj in pairs(ReplicatedStorage.Shared.SwordAPI.Collection:GetChildren()) do
        if obj.Name == SwordData['AnimationType'] then
            if useGrabParryOnly and obj:FindFirstChild("GrabParry") then
                ParryAnim = obj:FindFirstChild("GrabParry")
            elseif not useGrabParryOnly then
                ParryAnim = obj:FindFirstChild("GrabParry") or obj:FindFirstChild("Grab")
            end
        end
    end
    if not ParryAnim then
        ParryAnim = Instance.new("Animation")
        ParryAnim.AnimationId = "rbxassetid://14909890816"
    end
    Current_Anim_Track = LocalPlayer.Character.Humanoid.Animator:LoadAnimation(ParryAnim)
    if Current_Anim_Track then
        Current_Anim_Track.Priority = Enum.AnimationPriority.Action
        Current_Anim_Track:Play()
    end
end
AutoParry.PlayAnim = function(animName)
    local Anims = AnimStorage[animName]
    if not Anims then return false end
    local Animator = LocalPlayer.Character.Humanoid.Animator
    if AnimTrack and AnimTrack:IsA("AnimationTrack") then
        AnimTrack:Stop()
    end
    AnimTrack = Animator:LoadAnimation(Anims)
    if AnimTrack and AnimTrack:IsA("AnimationTrack") then
        AnimTrack:Play()
    end
    CurrentAnim = animName
end
AutoParry.GetBalls = function()
    local Balls = {}
    for _, instance in pairs(Workspace.Balls:GetChildren()) do
        if instance:GetAttribute("realBall") then
            instance.CanCollide = false
            table.insert(Balls, instance)
        end
    end
    return Balls
end
AutoParry.GetBall = function()
    for _, instance in pairs(Workspace.Balls:GetChildren()) do
        if instance:GetAttribute("realBall") then
            instance.CanCollide = false
            return instance
        end
    end
end
AutoParry.GetLobbyBalls = function()
    local LobbyBalls = {}
    for _, instance in pairs(Workspace.TrainingBalls:GetChildren()) do
        if instance:IsA("BasePart") and instance:GetAttribute("realBall") then
            instance.CanCollide = false
            table.insert(LobbyBalls, instance)
        end
    end
    return LobbyBalls
end
AutoParry.Linear_Interpolation = function(a, b, time_volume)
    return a + (b - a) * time_volume
end
AutoParry.IsCurved = function(ball)
    if not ball then return false, false end
    local Zoomies = ball:FindFirstChild('zoomies')
    if not Zoomies then return false, false end
    local Velocity = Zoomies.VectorVelocity
    local Speed = Velocity.Magnitude
    if Speed < 60 then return false, false end
    if not AutoParry.Velocity_History[ball] or #AutoParry.Velocity_History[ball] < 2 then
        return false, false
    end
    if not AutoParry.Dot_Histories[ball] or #AutoParry.Dot_Histories[ball] < 2 then
        return false, false
    end
    local Ball_Direction = Velocity.Unit
    local Direction = (LocalPlayer.Character.PrimaryPart.Position - ball.Position).Unit
    local Dot = Direction:Dot(Ball_Direction)
    local Speed_Threshold = math.min(Speed / 100, 40)
    local Angle_Threshold = 40 * math.max(Dot, 0)
    local Distance = (LocalPlayer.Character.PrimaryPart.Position - ball.Position).Magnitude
    local baseDotThreshold = 0.15
    if Speed > 600 then
        baseDotThreshold = -0.1
    elseif Speed > 400 then
        baseDotThreshold = 0.0
    elseif Speed > 200 then
        baseDotThreshold = 0.1
    end
    local Dot_Threshold = baseDotThreshold - (GetAveragePing() / 2000) - math.min(Speed / 4000, 0.1)
    local Reach_Time = Distance / Speed - (GetAveragePing() / 1000)
    local Ball_Distance_Threshold = 15 - math.min(Distance / 1000, 15) + Speed_Threshold
    local Clamped_Dot = math.clamp(Dot, -1, 1)
    local Radians = math.asin(math.abs(Clamped_Dot))
    Lerp_Radians = AutoParry.Linear_Interpolation(Lerp_Radians, Radians, 0.8)
    if Speed > 100 and Reach_Time > GetAveragePing() / 10 then
        Ball_Distance_Threshold = math.max(Ball_Distance_Threshold - 15, 15)
    end
    if Lerp_Radians < 0.018 then
        Last_Warp_Time = tick()
    end
    if (tick() - Last_Warp_Time) < (Reach_Time / 1.5) then
        return true, false
    end
    if (tick() - Curve_Time) < (Reach_Time / 1.5) then
        return true, false
    end
    local backwardsCurveDetected = false
    local backwardsAngleThreshold = 60
    if Speed > 600 then
        backwardsAngleThreshold = 50
    elseif Speed > 400 then
        backwardsAngleThreshold = 55
    else
        backwardsAngleThreshold = 65
    end
    local playerPos = LocalPlayer.Character.PrimaryPart.Position
    local ballPos = ball.Position
    local horizDirection = Vector3.new(playerPos.X - ballPos.X, 0, playerPos.Z - ballPos.Z)
    if horizDirection.Magnitude > 0 then
        horizDirection = horizDirection.Unit
    end
    local awayFromPlayer = -horizDirection
    local horizBallDir = Vector3.new(Ball_Direction.X, 0, Ball_Direction.Z)
    if horizBallDir.Magnitude > 0 then
        horizBallDir = horizBallDir.Unit
        local backwardsAngle = math.deg(math.acos(math.clamp(awayFromPlayer:Dot(horizBallDir), -1, 1)))
        if backwardsAngle < backwardsAngleThreshold and Distance > 30 then
            backwardsCurveDetected = true
        end
    end
    local directionChanged = false
    local changeThreshold = 0.80
    if Speed > 600 then
        changeThreshold = 0.75
    elseif Speed > 400 then
        changeThreshold = 0.78
    end
    if AutoParry.Velocity_History[ball] and #AutoParry.Velocity_History[ball] >= 4 then
        local prevVel = AutoParry.Velocity_History[ball][#AutoParry.Velocity_History[ball] - 1]
        if prevVel.Magnitude > 100 and Speed > 100 then
            local prevDir = prevVel.Unit
            local currDir = Ball_Direction
            local dotChange = prevDir:Dot(currDir)
            if dotChange < changeThreshold then
                directionChanged = true
            end
        end
    end
    local dotVariance = 0
    local significantVariance = false
    if AutoParry.Dot_Histories[ball] and #AutoParry.Dot_Histories[ball] >= 5 then
        local hist = AutoParry.Dot_Histories[ball]
        for i = 2, #hist do
            dotVariance = dotVariance + math.abs(hist[i] - hist[i-1])
        end
        dotVariance = dotVariance / (#hist - 1)
        local varianceThreshold = 0.08
        if Speed > 600 then
            varianceThreshold = 0.10
        elseif Speed > 400 then
            varianceThreshold = 0.09
        end
        if dotVariance > varianceThreshold then
            significantVariance = true
        end
    end
    local curveConditions = 0
    if Dot < Dot_Threshold then curveConditions = curveConditions + 1 end
    if backwardsCurveDetected then curveConditions = curveConditions + 3 end
    if directionChanged then curveConditions = curveConditions + 1 end
    if significantVariance then curveConditions = curveConditions + 1 end
    local curved = curveConditions >= 3 or backwardsCurveDetected
    return curved, backwardsCurveDetected
end
AutoParry.Closest_Player = function()
    if selectedTarget then
        return selectedTarget
    end
    local Max_Distance = math.huge
    local Found_Entity = nil
   
    for _, Entity in pairs(workspace.Alive:GetChildren()) do
        if tostring(Entity) ~= tostring(LocalPlayer) then
            if Entity.PrimaryPart then
                local Distance = LocalPlayer:DistanceFromCharacter(Entity.PrimaryPart.Position)
                if Distance < Max_Distance then
                    Max_Distance = Distance
                    Found_Entity = Entity
                end
            end
        end
    end
   
    Closest_Entity = Found_Entity
    return Found_Entity
end
AutoParry.Get_Entity_Properties = function()
    AutoParry.Closest_Player()
    if not Closest_Entity then
        return false
    end
    local Entity_Velocity = Closest_Entity.PrimaryPart.Velocity
    local Entity_Direction = (LocalPlayer.Character.PrimaryPart.Position - Closest_Entity.PrimaryPart.Position).Unit
    local Entity_Distance = (LocalPlayer.Character.PrimaryPart.Position - Closest_Entity.PrimaryPart.Position).Magnitude
    return {
        Velocity = Entity_Velocity,
        Direction = Entity_Direction,
        Distance = Entity_Distance
    }
end
local isMobile = UserInputService.TouchEnabled and not UserInputService.MouseEnabled
AutoParry.Parry_Data = function(Parry_Type)
    if not LocalPlayer.Character or not LocalPlayer.Character.PrimaryPart then return nil end
    local Events = {}
    local Camera = workspace.CurrentCamera
    local Vector2_Mouse_Location
   
    if LastInput == Enum.UserInputType.MouseButton1 or (Enum.UserInputType.MouseButton2 or LastInput == Enum.UserInputType.Keyboard) then
        local Mouse_Location = UserInputService:GetMouseLocation()
        Vector2_Mouse_Location = {Mouse_Location.X, Mouse_Location.Y}
    else
        Vector2_Mouse_Location = {Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2}
    end
   
    if isMobile then
        Vector2_Mouse_Location = {Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2}
    end
   
    local Players_Screen_Positions = {}
    for _, v in pairs(workspace.Alive:GetChildren()) do
        if v ~= LocalPlayer.Character then
            local worldPos = v.PrimaryPart.Position
            local screenPos, isOnScreen = Camera:WorldToScreenPoint(worldPos)
           
            if isOnScreen then
                Players_Screen_Positions[v] = Vector2.new(screenPos.X, screenPos.Y)
            end
           
            Events[tostring(v)] = screenPos
        end
    end
   
    if Parry_Type == 'Camera' then
        return {0, Camera.CFrame, Events, Vector2_Mouse_Location}
    end
   
    if Parry_Type == 'Backwards' then
        local Backwards_Direction = Camera.CFrame.LookVector * -10000
        Backwards_Direction = Vector3.new(Backwards_Direction.X, 0, Backwards_Direction.Z)
        return {0, CFrame.new(Camera.CFrame.Position, Camera.CFrame.Position + Backwards_Direction), Events, Vector2_Mouse_Location}
    end
    if Parry_Type == 'Straight' then
        local Aimed_Player = nil
        local Closest_Distance = math.huge
        local Mouse_Vector = Vector2.new(Vector2_Mouse_Location[1], Vector2_Mouse_Location[2])
       
        for _, v in pairs(workspace.Alive:GetChildren()) do
            if v ~= LocalPlayer.Character then
                local worldPos = v.PrimaryPart.Position
                local screenPos, isOnScreen = Camera:WorldToScreenPoint(worldPos)
               
                if isOnScreen then
                    local playerScreenPos = Vector2.new(screenPos.X, screenPos.Y)
                    local distance = (Mouse_Vector - playerScreenPos).Magnitude
                   
                    if distance < Closest_Distance then
                        Closest_Distance = distance
                        Aimed_Player = v
                    end
                end
            end
        end
       
        if Aimed_Player then
            return {0, CFrame.new(LocalPlayer.Character.PrimaryPart.Position, Aimed_Player.PrimaryPart.Position), Events, Vector2_Mouse_Location}
        else
            return {0, CFrame.new(LocalPlayer.Character.PrimaryPart.Position, Closest_Entity.PrimaryPart.Position), Events, Vector2_Mouse_Location}
        end
    end
   
if Parry_Type == 'Random' then
    local dirs = {"Backwards", "Left", "Right", "High"}
    local d = dirs[math.random(1, #dirs)]
    local v
    if d == "Backwards" then
        v = Camera.CFrame.LookVector * -10000
        v = Vector3.new(v.X, 0, v.Z)
    elseif d == "Left" then
        v = -Camera.CFrame.RightVector * 10000
    elseif d == "Right" then
        v = Camera.CFrame.RightVector * 10000
    elseif d == "High" then
        v = Camera.CFrame.UpVector * 10000
    end
    v = v + Vector3.new(math.random(-500, 500), math.random(-500, 500), math.random(-500, 500))
    return {0, CFrame.new(Camera.CFrame.Position, Camera.CFrame.Position + v), Events, Vector2_Mouse_Location}
end
   
    if Parry_Type == 'High' then
        local High_Direction = Camera.CFrame.UpVector * 10000
        return {0, CFrame.new(Camera.CFrame.Position, Camera.CFrame.Position + High_Direction), Events, Vector2_Mouse_Location}
    end
   
    if Parry_Type == 'Left' then
        local Left_Direction = Camera.CFrame.RightVector * 10000
        return {0, CFrame.new(Camera.CFrame.Position, Camera.CFrame.Position - Left_Direction), Events, Vector2_Mouse_Location}
    end
   
    if Parry_Type == 'Right' then
        local Right_Direction = Camera.CFrame.RightVector * 10000
        return {0, CFrame.new(Camera.CFrame.Position, Camera.CFrame.Position + Right_Direction), Events, Vector2_Mouse_Location}
    end
end
AutoParry.Parry = function(parryType)
    local parryData = AutoParry.Parry_Data(parryType)
    if not parryData then return end
    local hasRemotes = false
    for remote, originalArgs in pairs(ParryRemotes) do
        hasRemotes = true
        local modifiedArgs = {originalArgs[1], originalArgs[2], 0, parryData[2], parryData[3], parryData[4]}
        if remote:IsA("RemoteEvent") then
            remote:FireServer(unpack(modifiedArgs))
        elseif remote:IsA("RemoteFunction") then
            remote:InvokeServer(unpack(modifiedArgs))
        end
    end
    if not hasRemotes then
        mouse1click()
    end
    if Parries > 7 then return end
    Parries += 1
    task.delay(0.5, function() if Parries > 0 then Parries -= 1 end end)
end
AutoParry.PerformRemoteParry = function(parryType)
    local parryData = AutoParry.Parry_Data(parryType)
    if not parryData then return end
    for remote, originalArgs in pairs(ParryRemotes) do
        local modifiedArgs = {originalArgs[1], originalArgs[2], 0, parryData[2], parryData[3], parryData[4]}
        if remote:IsA("RemoteEvent") then
            remote:FireServer(unpack(modifiedArgs))
        elseif remote:IsA("RemoteFunction") then
            remote:InvokeServer(unpack(modifiedArgs))
        end
    end
end
AutoParry.Lerp = function(a, b, t)
    return a + (b - a) * t
end
AutoParry.ClosestPlayer = function()
    local maxDist = math.huge
    local closest = nil
    for _, entity in pairs(Alive:GetChildren()) do
        if tostring(entity) ~= tostring(LocalPlayer) then
            local dist = LocalPlayer:DistanceFromCharacter(entity.PrimaryPart.Position)
            if dist < maxDist then
                maxDist = dist
                closest = entity
            end
        end
    end
    return closest
end
local function GetNumNearby()
    local count = 0
    for _, p in pairs(Alive:GetChildren()) do
        if p.Name ~= LocalPlayer.Name and (p.PrimaryPart.Position - LocalPlayer.Character.PrimaryPart.Position).Magnitude < 50 then
            count = count + 1
        end
    end
    return count
end
AutoParry.GetEntityProps = function()
    local closest = AutoParry.ClosestPlayer()
    if not closest then return false end
    local vel = closest.PrimaryPart.Velocity
    local dir = (LocalPlayer.Character.PrimaryPart.Position - closest.PrimaryPart.Position).Unit
    local dist = (LocalPlayer.Character.PrimaryPart.Position - closest.PrimaryPart.Position).Magnitude
    return {Velocity = vel, Direction = dir, Distance = dist, Position = closest.PrimaryPart.Position}
end
AutoParry.GetBallProps = function()
    local ball = AutoParry.GetBall()
    if not ball then return false end
    local zoomies = ball:FindFirstChild('zoomies')
    if not zoomies then return false end
    local vel = zoomies.VectorVelocity
    local dir = (LocalPlayer.Character.PrimaryPart.Position - ball.Position).Unit
    local dist = (LocalPlayer.Character.PrimaryPart.Position - ball.Position).Magnitude
    local dot = dir:Dot(vel.Unit)
    local speed = vel.Magnitude
    return {Speed = speed, Velocity = vel, Direction = dir, Distance = dist, Dot = dot}
end
AutoParry.SpamService = function()
    local ball = AutoParry.GetBall()
    if not ball then return 0 end
    local closest = AutoParry.ClosestPlayer()
    if not closest then return 0 end
    local zoomies = ball:FindFirstChild('zoomies')
    if not zoomies then return 0 end
    local vel = zoomies.VectorVelocity
    local speed = vel.Magnitude
    local dot = AutoParry.GetBallProps().Dot
    local averagePing = GetAveragePing()
    local PingAdjustment = averagePing / 10
    if HighPingCompensation and averagePing > 150 then
        PingAdjustment = PingAdjustment * 1.5
    end
    local compensation = 0
    if AutoParryType == "Keypress" and AutoSpamType == "Keypress" then
        compensation = 15
    end
    local Maximum_Spam_Distance = PingAdjustment + math.min(speed / 4, 200) + compensation
    local entityProps = AutoParry.GetEntityProps()
    local ballProps = AutoParry.GetBallProps()
    if not entityProps or not ballProps then return 0 end
    if entityProps.Distance > Maximum_Spam_Distance or ballProps.Distance > Maximum_Spam_Distance or LocalPlayer:DistanceFromCharacter(closest.PrimaryPart.Position) > Maximum_Spam_Distance then return 0 end
    local Maximum_Speed = 5 - math.min(speed / 5, 5)
    local Maximum_Dot = math.clamp(dot, -1, 0) * Maximum_Speed
    local Spam_Accuracy = Maximum_Spam_Distance - Maximum_Dot
    return Spam_Accuracy
end
AutoParry.IsCooldownActive = function(uigradient)
    return uigradient.Offset.Y <= 0.27
end
AutoParry.TryParryOrCooldown = function()
    if AutoParry.IsCooldownActive(ParryCD) then
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("PlrInput"):FireServer("UseAbility")
        return true
    end
    return false
end
local function BlockMovement(actionName, inputState, inputObject)
    return Enum.ContextActionResult.Sink
end
local function SetupAntiPhantom()
    if Connections["anti_phantom"] then return end
    Connections["anti_phantom"] = RunService.PreSimulation:Connect(function()
        if Phantom and LocalPlayer.Character:GetAttribute('Parrying') then
            ContextActionService:BindAction('BlockPlayerMovement', BlockMovement, false, Enum.KeyCode.W, Enum.KeyCode.A, Enum.KeyCode.S, Enum.KeyCode.D, Enum.UserInputType.Touch)
            LocalPlayer.Character.Humanoid.WalkSpeed = 36
            local ball = AutoParry.GetBall()
            if ball then
                LocalPlayer.Character.Humanoid:MoveTo(ball.Position)
            end
            task.spawn(function()
                repeat
                    LocalPlayer.Character.Humanoid.WalkSpeed = 36
                    task.wait()
                until not Phantom
            end)
            if ball then
                ball:GetAttributeChangedSignal('target'):Once(function()
                    ContextActionService:UnbindAction('BlockPlayerMovement')
                    Phantom = false
                    LocalPlayer.Character.Humanoid:MoveTo(LocalPlayer.Character.HumanoidRootPart.Position)
                    LocalPlayer.Character.Humanoid.WalkSpeed = 10
                    task.delay(3, function()
                        LocalPlayer.Character.Humanoid.WalkSpeed = 36
                    end)
                end)
            end
        end
    end)
end
local VirtualInputManager = game:GetService("VirtualInputManager")
local isMobileDevice = UserInputService.TouchEnabled and not UserInputService.MouseEnabled

local function SimulateParry()
    if isMobileDevice then
        mouse1click()
    else
        VirtualInputManager:SendMouseButtonEvent(0, 0, 0, true, game, 0)
        task.wait()
        VirtualInputManager:SendMouseButtonEvent(0, 0, 0, false, game, 0)
    end
end

local function KeypressAPC(parryType)
    if not LocalPlayer.Character or not LocalPlayer.Character.PrimaryPart then return end
    local parryData = AutoParry.Parry_Data(parryType)
    if not parryData then return end
    local cam = workspace.CurrentCamera
    local orig = cam.CFrame
    local randomAngle = CFrame.Angles(math.rad(math.random(-5,5)), math.rad(math.random(-5,5)), math.rad(math.random(-2,2)))
    local target = parryData[2] * randomAngle
    local startTime = tick()
    local duration = 0.11 + math.random(-10,10)/1000
    local conn
    conn = RunService.Heartbeat:Connect(function()
        local elapsed = tick() - startTime
        if elapsed >= duration then
            conn:Disconnect()
            SimulateParry()
            task.wait(0.25 + math.random(-30,30)/1000)
            local backStart = tick()
            local backDuration = 0.14
            local backConn
            backConn = RunService.Heartbeat:Connect(function()
                local backElapsed = tick() - backStart
                if backElapsed >= backDuration then
                    backConn:Disconnect()
                    return
                end
                local backAlpha = backElapsed / backDuration
                backAlpha = 1 - (1 - backAlpha)^2
                cam.CFrame = target:Lerp(orig, backAlpha)
            end)
            return
        end
        local alpha = elapsed / duration
        alpha = alpha^2
        cam.CFrame = orig:Lerp(target, alpha)
    end)
end

ReplicatedStorage.Remotes.DeathBall.OnClientEvent:Connect(function(value)
    DeathSlashDetection = value
end)
ReplicatedStorage.Remotes.InfinityBall.OnClientEvent:Connect(function(a, b)
    Infinity_Ball = b
end)
ReplicatedStorage.Remotes.Phantom.OnClientEvent:Connect(function(a, b)
    if b.Name == tostring(LocalPlayer) then
        Phantom = true
    else
        Phantom = false
    end
end)
local LastParry = 0
local VizEnabled = false
local function GetCharacter()
    return LocalPlayer and LocalPlayer.Character
end
local function GetPrimaryPart()
    local char = GetCharacter()
    return char and char.PrimaryPart
end
local function CalcVizRadius()
    local ball = AutoParry.GetBall()
    if ball then
        local vel = ball.Velocity.Magnitude
        local radius = math.clamp((vel / 2.4) + 10, 15, 50)
        return radius
    end
    return 15
end
local Viz = Instance.new("Part")
Viz.Shape = Enum.PartType.Ball
Viz.Anchored = true
Viz.CanCollide = false
Viz.Material = Enum.Material.ForceField
Viz.Transparency = 0.5
Viz.Parent = Workspace
Viz.Size = Vector3.new(0, 0, 0)
local TargetColor = Color3.new(0,1,0)
local CurrentColor = Color3.new(0,1,0)
local LerpSpeed = 0.1
local function ToggleViz(state)
    VizEnabled = state
    if not state then Viz.Size = Vector3.new(0, 0, 0) end
end
RunService.RenderStepped:Connect(function()
    if not VizEnabled then return end
    local primaryPart = GetPrimaryPart()
    local ball = AutoParry.GetBall()
    if primaryPart and ball then
        local radius = CalcVizRadius()
        Viz.Size = Vector3.new(radius, radius, radius)
        Viz.CFrame = primaryPart.CFrame
        if IsAutoSpamming then
            TargetColor = Color3.new(1,0,0)
        else
            TargetColor = Color3.new(0,1,0)
        end
        CurrentColor = CurrentColor:Lerp(TargetColor, LerpSpeed)
        Viz.Color = CurrentColor
    else
        Viz.Size = Vector3.new(0, 0, 0)
    end
end)
local Runtime = Workspace.Runtime
local LastElapsed_Parry_Time = 0
local Parry_Rate = 5
local Min_Parry_Delay = 1 / Parry_Rate
local AutoSpamCoroutine
local SpectateEnabled = false
task.defer(function()
    RunService.RenderStepped:Connect(function()
        if SpectateEnabled then
            local self = AutoParry.GetBall()
            if not self then return end
            Workspace.CurrentCamera.CFrame = Workspace.CurrentCamera.CFrame:Lerp(CFrame.new(Workspace.CurrentCamera.CFrame.Position, self.Position), 1.5)
        end
    end)
end)
local OriginalLighting = {}
local function Optimize(state)
    if state then
        local light = game:GetService("Lighting")
        OriginalLighting = {
            GlobalShadows = light.GlobalShadows,
            FogEnd = light.FogEnd,
            Brightness = light.Brightness,
            OutdoorAmbient = light.OutdoorAmbient,
            EnvDiffuseScale = light.EnvironmentDiffuseScale,
            EnvSpecularScale = light.EnvironmentSpecularScale,
            ShadowSoftness = light.ShadowSoftness
        }
        light.GlobalShadows = false
        light.FogEnd = 100000
        light.Brightness = 1
        light.OutdoorAmbient = Color3.fromRGB(128, 128, 128)
        light.EnvironmentDiffuseScale = 0
        light.EnvironmentSpecularScale = 0
        light.ShadowSoftness = 1
        if Workspace:FindFirstChildOfClass("Terrain") then
            local terrain = Workspace:FindFirstChildOfClass("Terrain")
            terrain.WaterWaveSize = 0
            terrain.WaterWaveSpeed = 0
            terrain.WaterReflectance = 0
            terrain.WaterTransparency = 1
        end
        for _, obj in pairs(game:GetDescendants()) do
            if obj:IsA("Explosion") or obj:IsA("Fire") or obj:IsA("Smoke") or obj:IsA("Sparkles") or obj:IsA("Trail") or obj:IsA("ParticleEmitter") or obj:IsA("Beam") then
                obj:Destroy()
            elseif obj:IsA("Texture") or obj:IsA("Decal") or obj:IsA("SurfaceAppearance") then
                obj:Destroy()
            elseif obj:IsA("BlurEffect") or obj:IsA("SunRaysEffect") or obj:IsA("ColorCorrectionEffect") or obj:IsA("BloomEffect") or obj:IsA("DepthOfFieldEffect") then
                obj:Destroy()
            end
        end
    else
        local light = game:GetService("Lighting")
        for setting, value in pairs(OriginalLighting) do
            pcall(function() light[setting] = value end)
        end
    end
end



local parriedBalls = {}
  local MainTab = main:create_tab("Main ", "rbxassetid://76499042599127")
  local MiscTab = main:create_tab("Misc ", "rbxassetid://6023565894")
  local AITab = main:create_tab("AI Play ", "rbxassetid://6023565894")
  local AutoFarmTab = main:create_tab("Auto Farm ", "rbxassetid://6023565894")
  local lobbyAutoParryModule = MainTab:create_module({
      title = "Lobby AP",
      flag = "lobbyAutoParryModule",
      description = "Auto parry for the lobby game",
      section = "right",
      callback = function(v)
          local LastLobbyParry = 0
          if v then
              for _, ball in pairs(AutoParry.GetLobbyBalls()) do
                  Connections["lobby_parried_" .. tostring(ball)] = ball:GetAttributeChangedSignal('target'):Connect(function()
                      parriedBalls[ball] = false
                  end)
              end
              Connections["lobby_ball_added"] = Workspace.TrainingBalls.ChildAdded:Connect(function(newBall)
                  if newBall:IsA("BasePart") and newBall:GetAttribute("realBall") then
                      Connections["lobby_parried_" .. tostring(newBall)] = newBall:GetAttributeChangedSignal('target'):Connect(function()
                          parriedBalls[newBall] = false
                      end)
                  end
              end)
              Connections["lobby_ball_removed"] = Workspace.TrainingBalls.ChildRemoved:Connect(function(removedBall)
                  local key = "lobby_parried_" .. tostring(removedBall)
                  if Connections[key] then
                      Connections[key]:Disconnect()
                      Connections[key] = nil
                  end
                  parriedBalls[removedBall] = nil
              end)
              Connections["lobbyAutoParry"] = RunService.PreSimulation:Connect(function()
                  local balls = AutoParry.GetLobbyBalls()
                  for _, ball in pairs(balls) do
                      if not ball then
                          ContextActionService:UnbindAction('BlockPlayerMovement')
                          repeat RunService.Heartbeat:Wait() balls = AutoParry.GetLobbyBalls() until balls
                          return
                      end
                      local zoomies = ball:FindFirstChild("zoomies")
                      if not zoomies then
                          ContextActionService:UnbindAction('BlockPlayerMovement')
                          return
                      end
                      ball:GetAttributeChangedSignal('target'):Once(function() Parried = false end)
                      if Parried then continue end
                      local ballTarget = ball:GetAttribute('target')
                      local oneTarget = oneBall:GetAttribute('target')
                      local velocity = zoomies.VectorVelocity
                      local distance = (LocalPlayer.Character.PrimaryPart.Position - ball.Position).Magnitude
                      local speed = velocity.Magnitude
                      local averagePing = GetAveragePing()
                      local useAbility = false
                      local cappedSpeedDifference = math.min(math.max(speed - 9.5, 0), 820)
                      local speedDivisorBase = 2.4 + cappedSpeedDifference * 0.002
                      local adjustedPing = averagePing / 10
                      if HighPingCompensation and averagePing > 150 then
                          adjustedPing = adjustedPing * 1.5
                      end
                      local speedDivisor = speedDivisorBase * Speed_Divisor_Multiplier
                      local parryAccuracy = adjustedPing + math.max(speed / speedDivisor, 9.5)
                      if ballTarget == tostring(LocalPlayer) then
                          local minParryDelay = 0.15 + (averagePing / 1000)
                          local Elapsed_Parry_Time = os.clock()
                          local timeView = (Elapsed_Parry_Time - LastLobbyParry)
                          if timeView < minParryDelay then continue end
                          if distance <= parryAccuracy then
                              if LobbyParryType == "Remote" then
                                  if Is_Supported_Test and next(ParryRemotes) then
                                      AutoParry.Parry(SelectedParryType)
                                  else
                                      SimulateParry()
                                  end
                              else
                                  SimulateParry()
                              end
                              parriedBalls[ball] = true
                              task.delay(1, function()
                                  parriedBalls[ball] = false
                              end)
                              LastLobbyParry = Elapsed_Parry_Time
                          end
                      end
                  end
              end)
          elseif Connections["lobbyAutoParry"] then
              Connections["lobbyAutoParry"]:Disconnect()
              Connections["lobbyAutoParry"] = nil
              for key, conn in pairs(Connections) do
                  if key:find("lobby_parried_") or key == "lobby_ball_added" or key == "lobby_ball_removed" then
                      conn:Disconnect()
                      Connections[key] = nil
                  end
              end
              parriedBalls = {}
          end
      end
  })
  lobbyAutoParryModule:create_dropdown({
      title = "Parry Type",
      flag = "LobbyParryType",
      options = Is_Supported_Test and {"Remote", "Keypress"} or {"Keypress"},
      multi_dropdown = false,
      maximum_options = 999,
      callback = function(v)
          LobbyParryType = v
      end
  })
  local autoParryModule = MainTab:create_module({
      title = "Auto Parry",
      flag = "autoParryModule",
      description = "Automatially parries for you",
      section = "left",
      callback = function(v)
          if v then
              if AutoPostParry then
                  Connections["autoPostParry_deathMonitor"] = Alive.ChildRemoved:Connect(function(removedCharacter)
                      if not AutoPostParry then return end
                      if not PostParryTarget or PostParryTarget == "" then return end
                      if removedCharacter.Name ~= PostParryTarget then return end
                      if PostParryScheduled[removedCharacter.Name] then return end
                      local hadHighSpeed = false
                      for ball, speeds in pairs(PostParryVelocityHistory) do
                          for _, speed in ipairs(speeds) do
                              if speed >= 800 then
                                  hadHighSpeed = true
                                  break
                              end
                          end
                          if hadHighSpeed then break end
                      end
                      if hadHighSpeed then
                          PostParryScheduled[removedCharacter.Name] = true
                          local randomDelay = (math.random(150, 180) / 1000)
                          task.delay(randomDelay, function()
                              SimulateParry()
                              PostParryScheduled[removedCharacter.Name] = nil
                          end)
                      end
                      PostParryTarget = nil
                      PostParryVelocityHistory = {}
                  end)
              end
              Connections["autoParry"] = RunService.PreSimulation:Connect(function()
                  local oneBall = AutoParry.GetBall()
                  local balls = AutoParry.GetBalls()
                  for _, ball in pairs(balls) do
                      if not ball then
                          ContextActionService:UnbindAction('BlockPlayerMovement')
                          repeat RunService.Heartbeat:Wait() balls = AutoParry.GetBalls() until balls
                          return
                      end
                      local zoomies = ball:FindFirstChild('zoomies')
                      if not zoomies then
                          ContextActionService:UnbindAction('BlockPlayerMovement')
                          return
                      end
                      ball:GetAttributeChangedSignal('target'):Once(function() Parried = false end)
                      if Parried then continue end
                      local ballTarget = ball:GetAttribute('target')
                      local oneTarget = oneBall:GetAttribute('target')
                      local velocity = zoomies.VectorVelocity
                      if not AutoParry.Velocity_History[ball] then AutoParry.Velocity_History[ball] = {} end
                      table.insert(AutoParry.Velocity_History[ball], velocity)
                      if #AutoParry.Velocity_History[ball] > 5 then table.remove(AutoParry.Velocity_History[ball], 1) end
                      local Direction = (LocalPlayer.Character.PrimaryPart.Position - ball.Position).Unit
                      local Ball_Direction = velocity.Unit
                      local Dot = Direction:Dot(Ball_Direction)
                      if not AutoParry.Dot_Histories[ball] then AutoParry.Dot_Histories[ball] = {} end
                      table.insert(AutoParry.Dot_Histories[ball], Dot)
                      if #AutoParry.Dot_Histories[ball] > 5 then table.remove(AutoParry.Dot_Histories[ball], 1) end
                      local pingedValued = game:GetService('Stats').Network.ServerStatsItem['Data Ping']:GetValue()
                      local time = pingedValued / 2000
                      local playerVel = LocalPlayer.Character.PrimaryPart.Velocity
                      local Ball_Position = ball.Position
                      local Ball_Future_Position = Ball_Position + velocity * time
                      local Player_Future_Position = LocalPlayer.Character.PrimaryPart.Position + playerVel * time
                      local distance = (Player_Future_Position - Ball_Future_Position).Magnitude
                      local speed = velocity.Magnitude
                      if AutoPostParry then
                          if not PostParryVelocityHistory[ball] then PostParryVelocityHistory[ball] = {} end
                          table.insert(PostParryVelocityHistory[ball], speed)
                          if #PostParryVelocityHistory[ball] > 15 then table.remove(PostParryVelocityHistory[ball], 1) end
                          if ballTarget and ballTarget ~= "" and ballTarget ~= tostring(LocalPlayer) then
                              PostParryTarget = ballTarget
                          elseif ballTarget == tostring(LocalPlayer) and PostParryTarget and PostParryTarget ~= "" then
                          end
                      end
                      local curved, backwardsDetected = AutoParry.IsCurved(ball)
                      if backwardsDetected then
                          wasBackwards[ball] = true
                      end
                      local tornado = Runtime:FindFirstChild('Tornado')
                      if ball:FindFirstChild('AeroDynamicSlashVFX') then
                          Debris:AddItem(ball.AeroDynamicSlashVFX, 0)
                          Tornado_Time = tick()
                      end
                      if tornado then
                          local elapsedTornado = (tick() - Tornado_Time)
                          local tornadoDuration = (tornado:GetAttribute('TornadoTime') or 1) + 0.314159
                          if elapsedTornado < tornadoDuration then continue end
                      end
                      local singularityCape = LocalPlayer.Character.PrimaryPart:FindFirstChild('SingularityCape')
                      local Predicted_Direction = (Player_Future_Position - Ball_Future_Position).Unit
                      local Predicted_Dot = Predicted_Direction:Dot(velocity.Unit)
                      if oneTarget == tostring(LocalPlayer) and Predicted_Dot < -0.3 then continue end
                      if Singularity_Detection and singularityCape then continue end
                      local hotbar = LocalPlayer:FindFirstChild('PlayerGui') and LocalPlayer.PlayerGui:FindFirstChild('Hotbar')
                      local character = LocalPlayer.Character
                      local abilities = character and character:FindFirstChild('Abilities')
                      local durationUI = hotbar and hotbar:FindFirstChild('Ability') and hotbar.Ability:FindFirstChild('Duration') and hotbar.Ability.Duration.Visible
                      local infinityAbility = abilities and abilities:FindFirstChild('Infinity')
                      local infinity = infinityAbility and infinityAbility.Enabled
                      local usingInfinity = durationUI and infinity and Infinity_Ball
                      if Infinity_Detection and usingInfinity then continue end
                      local timeholeAbility = abilities and abilities:FindFirstChild('Time Hole')
                      local timehole = timeholeAbility and timeholeAbility.Enabled
                      if durationUI and timehole then continue end
                      if AntiPhantomEnabled and Phantom and LocalPlayer.Character:GetAttribute('Parrying') then
                          ContextActionService:BindAction('BlockPlayerMovement', BlockMovement, false, Enum.KeyCode.W, Enum.KeyCode.A, Enum.KeyCode.S, Enum.KeyCode.D, Enum.UserInputType.Touch)
                          LocalPlayer.Character.Humanoid.WalkSpeed = 36
                          LocalPlayer.Character.Humanoid:MoveTo(ball.Position)
                          task.spawn(function()
                              repeat
                                  if LocalPlayer.Character.Humanoid.WalkSpeed ~= 36 then
                                      LocalPlayer.Character.Humanoid.WalkSpeed = 36
                                  end
                                  task.wait()
                              until not Phantom
                          end)
                          ball:GetAttributeChangedSignal('target'):Once(function()
                              ContextActionService:UnbindAction('BlockPlayerMovement')
                              Phantom = false
                              LocalPlayer.Character.Humanoid:MoveTo(LocalPlayer.Character.HumanoidRootPart.Position)
                              LocalPlayer.Character.Humanoid.WalkSpeed = 10
                              task.delay(3, function()
                                  LocalPlayer.Character.Humanoid.WalkSpeed = 36
                              end)
                          end)
                      end
                      local entityProps = AutoParry.GetEntityProps()
                      local distance_to_opponent = entityProps and entityProps.Distance or 50
                      local cappedSpeedDifference = math.min(math.max(speed - 9.5, 0), 820)
                      local speedDivisorBase = 2.4 + cappedSpeedDifference * 0.002
                      local adjustedPing = pingedValued / 10
                      if HighPingCompensation and pingedValued > 150 then
                          adjustedPing = adjustedPing * 1.5
                      end
                      local speedDivisor = speedDivisorBase * Speed_Divisor_Multiplier
                      local parryAccuracy = adjustedPing + math.max(speed / speedDivisor, 9.5)
                      if curved and backwardsDetected then
                          local distanceReduction = 55
                          if speed > 700 then
                              distanceReduction = 85
                          elseif speed > 600 then
                              distanceReduction = 75
                          elseif speed > 500 then
                              distanceReduction = 68
                          elseif speed > 400 then
                              distanceReduction = 62
                          end
                          parryAccuracy = parryAccuracy - distanceReduction
                      elseif curved then
                          local distanceReduction = 38
                          if speed > 700 then
                              distanceReduction = 58
                          elseif speed > 600 then
                              distanceReduction = 52
                          elseif speed > 500 then
                              distanceReduction = 46
                          elseif speed > 400 then
                              distanceReduction = 42
                          end
                          parryAccuracy = parryAccuracy - distanceReduction
                      end
                      local speedFactor = 0.8 + math.min(speed / 2000, 1.0)
                      local distFactor = 1 + (30 - math.min(distance_to_opponent, 30)) / 30 * 0.8
                      local factor = speedFactor * distFactor
                      parryAccuracy = adjustedPing + math.max((speed / speedDivisor) * factor, 9.5)
                      local parryCD = LocalPlayer.PlayerGui:FindFirstChild('Hotbar'):FindFirstChild('Block').UIGradient
                      local abilityCD = LocalPlayer.PlayerGui:FindFirstChild('Hotbar'):FindFirstChild('Ability').UIGradient
                      if ballTarget == tostring(LocalPlayer) and distance <= parryAccuracy and Phantom then
                          if AutoParryType == "Keypress" then
                              KeypressAPC(SelectedParryType)
                          else
                              SimulateParry()
                          end
                          Parries += 1
                          task.delay(0.5, function() if Parries > 0 then Parries -= 1 end end)
                          Parried = true
                      end
                      if ballTarget == tostring(LocalPlayer) and distance <= parryAccuracy and not Phantom then
                          if Death_Slash_Detection and DeathSlashDetection then continue end
                          local parryTime = os.clock()
                          local timeView = (parryTime - LastParry)
                          if timeView > 0.5 then AutoParry.ParryAnim(false) end
                          local averagePing = GetAveragePing()
                          local useAbility = false
                          if HighPingProtection and averagePing > 130 then
                                  useAbility = true
                                  Use_Ability:Fire()
                          end
                          if not useAbility then
                              if AutoParryType == "Remote" then
                                  if Is_Supported_Test and next(ParryRemotes) then
                                      AutoParry.Parry(SelectedParryType)
                                  else
                                      if AutoParryType == "Keypress" then
                                          KeypressAPC(SelectedParryType)
                                      else
                                          SimulateParry()
                                      end
                                      Parries += 1
                                      task.delay(0.5, function() if Parries > 0 then Parries -= 1 end end)
                                  end
                              else
                                  if AutoParryType == "Keypress" then
                                      KeypressAPC(SelectedParryType)
                                  else
                                      SimulateParry()
                                  end
                                  Parries += 1
                                  task.delay(0.5, function() if Parries > 0 then Parries -= 1 end end)
                              end
                          end
                          LastParry = parryTime
                          Parried = true
                          wasBackwards[ball] = false
                          local lastParrys = tick()
                          repeat RunService.PreSimulation:Wait() until (tick() - lastParrys) >= 1 or not Parried
                          Parried = false
                      end
                  end
              end)
          elseif Connections["autoParry"] then
              Connections["autoParry"]:Disconnect()
              Connections["autoParry"] = nil
              if Connections["autoPostParry_deathMonitor"] then
                  Connections["autoPostParry_deathMonitor"]:Disconnect()
                  Connections["autoPostParry_deathMonitor"] = nil
              end
              PostParryTarget = nil
              PostParryVelocityHistory = {}
              PostParryScheduled = {}
          end
      end
  })
  autoParryModule:create_dropdown({
      title = "Parry Type",
      flag = "AutoParryType",
      options = Is_Supported_Test and {"Remote", "Keypress"} or {"Keypress"},
      multi_dropdown = false,
      maximum_options = 999,
      callback = function(v)
          AutoParryType = v
      end
  })
  autoParryModule:create_dropdown({
      title = "Curve Type",
      flag = "ParryDirection",
      options = {"Backwards", "Camera", "High", "Left", "Random", "Right", "Straight"},
      multi_dropdown = false,
      maximum_options = 999,
      callback = function(v)
          SelectedParryType = v
      end
  })
  autoParryModule:create_divider({})
  autoParryModule:create_checkbox({
      title = "Randomized Parry Accuracy",
      flag = "RandomizedParryAccuracy",
      callback = function(v)
          Randomized_ParryAccuracy = v
      end
  })
  autoParryModule:create_slider({
      title = "Parry Accuracy",
      flag = "ParryAccuracy",
      maximum_value = 100,
      minimum_value = 1,
      value = 100,
      round_number = true,
      callback = function(v)
          Speed_Divisor_Multiplier = 0.7 + ((v - 1) / 99) * 0.35
      end
  })
  
  autoParryModule:create_divider({})

  autoParryModule:create_checkbox({
      title = "High Ping Compensation",
      flag = "HighPingCompensation",
      callback = function(v)
          HighPingCompensation = v
      end
  })
  autoParryModule:create_checkbox({
      title = "Auto Pre-Click",
      flag = "AutoPostParry",
      callback = function(v)
          AutoPostParry = v
          if v then
              Connections["autoPostParry_continuousCheck"] = RunService.Heartbeat:Connect(function()
                  if not AutoPostParry then return end
                  if not PostParryTarget or PostParryTarget == "" then return end
                  if PostParryScheduled[PostParryTarget] then return end
                  local targetChar = Alive:FindFirstChild(PostParryTarget)
                  if not targetChar then
                      local hadHighSpeed = false
                      for ball, speeds in pairs(PostParryVelocityHistory) do
                          for _, speed in ipairs(speeds) do
                              if speed >= 800 then
                                  hadHighSpeed = true
                                  break
                              end
                          end
                          if hadHighSpeed then break end
                      end
                      if hadHighSpeed then
                          PostParryScheduled[PostParryTarget] = true
                          local randomDelay = (math.random(120, 140) / 1000)
                          task.delay(randomDelay, function()
                              SimulateParry()
                              PostParryScheduled[PostParryTarget] = nil
                          end)
                      end
                      PostParryTarget = nil
                      PostParryVelocityHistory = {}
                  end
              end)
          else
              if Connections["autoPostParry_continuousCheck"] then
                  Connections["autoPostParry_continuousCheck"]:Disconnect()
                  Connections["autoPostParry_continuousCheck"] = nil
              end
              PostParryTarget = nil
              PostParryVelocityHistory = {}
              PostParryScheduled = {}
              BallSenderTracking = {}
          end
      end
  })
  autoParryModule:create_checkbox({
      title = "Singularity Detection",
      flag = "SingularityDetection",
      callback = function(v)
          Singularity_Detection = v
      end
  })
  autoParryModule:create_checkbox({
      title = "Infinity Detection",
      flag = "InfinityDetection",
      callback = function(v)
          Infinity_Detection = v
      end
  })
  autoParryModule:create_checkbox({
      title = "Cooldown Protection",
      flag = "CooldownProtection",
      callback = function(v)
          CooldownProtection = v
      end
  })
  autoParryModule:create_checkbox({
      title = "High Ping Protection",
      flag = "HighPingProtection",
      callback = function(v)
          HighPingProtection = v
      end
  })
  autoParryModule:create_checkbox({
      title = "Death Slash Detection",
      flag = "DeathSlashDetection",
      callback = function(v)
          Death_Slash_Detection = v
      end
  })
  autoParryModule:create_checkbox({
      title = "Anti Phantom",
      flag = "AntiPhantom",
      callback = function(v)
          AntiPhantomEnabled = v
          if v then
              SetupAntiPhantom()
          else
              if Connections["anti_phantom"] then
                  Connections["anti_phantom"]:Disconnect()
                  Connections["anti_phantom"] = nil
              end
          end
      end
  })
  local isTriggerbotEnabled = false
  local triggerParriedBalls = {}
  local triggerbotModule = MainTab:create_module({
      title = "Triggerbot",
      flag = "triggerbot",
      description = "Parries instantly when targeted",
      section = "right",
      callback = function(v)
          isTriggerbotEnabled = v
          if v then
              if Library._config._flags["TriggerAutoPostParry"] then
                  Connections["triggerbot_postParry_deathMonitor"] = Alive.ChildRemoved:Connect(function(removedCharacter)
                      if not Library._config._flags["TriggerAutoPostParry"] then return end
                      if not PostParryTarget or PostParryTarget == "" then return end
                      if removedCharacter.Name ~= PostParryTarget then return end
                      if PostParryScheduled[removedCharacter.Name] then return end
                      local hadHighSpeed = false
                      for ball, speeds in pairs(PostParryVelocityHistory) do
                          for _, speed in ipairs(speeds) do
                              if speed >= 800 then
                                  hadHighSpeed = true
                                  break
                              end
                          end
                          if hadHighSpeed then break end
                      end
                      if hadHighSpeed then
                          PostParryScheduled[removedCharacter.Name] = true
                          local randomDelay = (math.random(150, 180) / 1000)
                          task.delay(randomDelay, function()
                              SimulateParry()
                              PostParryScheduled[removedCharacter.Name] = nil
                          end)
                      end
                      PostParryTarget = nil
                      PostParryVelocityHistory = {}
                  end)
              end
              Connections["triggerbot_monitor"] = RunService.PreSimulation:Connect(function()
                  if not isTriggerbotEnabled then return end
                  local ball = AutoParry.GetBall()
                  if not ball then return end
                  local ballTarget = ball:GetAttribute('target')
                  local zoomies = ball:FindFirstChild('zoomies')
                  if zoomies and Library._config._flags["TriggerAutoPostParry"] then
                      local velocity = zoomies.VectorVelocity
                      local speed = velocity.Magnitude
                      if not PostParryVelocityHistory[ball] then PostParryVelocityHistory[ball] = {} end
                      table.insert(PostParryVelocityHistory[ball], speed)
                      if #PostParryVelocityHistory[ball] > 15 then table.remove(PostParryVelocityHistory[ball], 1) end
                      if ballTarget and ballTarget ~= "" and ballTarget ~= tostring(LocalPlayer) then
                          PostParryTarget = ballTarget
                      end
                  end
                  if ballTarget ~= tostring(LocalPlayer) then 
                      triggerParriedBalls[ball] = nil
                      return 
                  end
                  if triggerParriedBalls[ball] then return end
                  local hotbar = LocalPlayer:FindFirstChild('PlayerGui') and LocalPlayer.PlayerGui:FindFirstChild('Hotbar')
                  local character = LocalPlayer.Character
                  if not character or not character.PrimaryPart then return end
                  local abilities = character:FindFirstChild('Abilities')
                  local durationUI = hotbar and hotbar:FindFirstChild('Ability') and hotbar.Ability:FindFirstChild('Duration') and hotbar.Ability.Duration.Visible
                  local infinityAbility = abilities and abilities:FindFirstChild('Infinity')
                  local infinity = infinityAbility and infinityAbility.Enabled
                  local usingInfinity = durationUI and infinity and Infinity_Ball
                  if TriggerInfinity_Detection and usingInfinity then return end
                  local singularityCape = character.PrimaryPart:FindFirstChild('SingularityCape')
                  if TriggerSingularity_Detection and singularityCape then return end
                  if TriggerDeathSlash_Detection and DeathSlashDetection then return end
                  if not zoomies then return end
                  local velocity = zoomies.VectorVelocity
                  local speed = velocity.Magnitude
                  local pingedValued = game:GetService('Stats').Network.ServerStatsItem['Data Ping']:GetValue()
                  local time = pingedValued / 2000
                  local playerVel = character.PrimaryPart.Velocity
                  local Ball_Position = ball.Position
                  local Ball_Future_Position = Ball_Position + velocity * time
                  local Player_Future_Position = character.PrimaryPart.Position + playerVel * time
                  local distance = (Player_Future_Position - Ball_Future_Position).Magnitude
                  local cappedSpeedDifference = math.min(math.max(speed - 9.5, 0), 820)
                  local speedDivisorBase = 2.4 + cappedSpeedDifference * 0.002
                  local adjustedPing = pingedValued / 10
                  if HighPingCompensation and pingedValued > 150 then
                      adjustedPing = adjustedPing * 1.5
                  end
                  local speedDivisor = speedDivisorBase * Speed_Divisor_Multiplier
                  local parryAccuracy = adjustedPing + math.max(speed / speedDivisor, 9.5)
                  if distance > parryAccuracy then return end
                  AutoParry.ParryAnim(false)
                  local averagePing = GetAveragePing()
                  local useAbility = false
                  local abilityCD = hotbar and hotbar:FindFirstChild('Ability') and hotbar.Ability.UIGradient
                  if TriggerHighPingProtection and averagePing > 130 then
                      if abilityCD and abilityCD.Offset.Y == 0.5 and (abilities["Raging Deflection"].Enabled or abilities["Rapture"].Enabled) then
                          useAbility = true
                          Use_Ability:Fire()
                      end
                  end
                  if not useAbility then
                      if TriggerbotType == "Remote" then
                          if Is_Supported_Test and next(ParryRemotes) then
                              AutoParry.PerformRemoteParry(SelectedTriggerParryType)
                          else
                              SimulateParry()
                              Parries += 1
                              task.delay(0.5, function() if Parries > 0 then Parries -= 1 end end)
                          end
                      else
                          if TriggerbotType == "Keypress" and KeypressAutoCurve then
                              KeypressAPC(SelectedTriggerParryType)
                          else
                              SimulateParry()
                          end
                          Parries += 1
                          task.delay(0.5, function() if Parries > 0 then Parries -= 1 end end)
                      end
                  end
                  triggerParriedBalls[ball] = true
              end)
              local prevUsingInfinityTB = nil
              Connections["triggerbot_infinity_watch"] = RunService.PreSimulation:Connect(function()
                  if not isTriggerbotEnabled then return end
                  local hotbarW = LocalPlayer:FindFirstChild('PlayerGui') and LocalPlayer.PlayerGui:FindFirstChild('Hotbar')
                  local characterW = LocalPlayer.Character
                  local abilitiesW = characterW and characterW:FindFirstChild('Abilities')
                  local durationUIW = hotbarW and hotbarW:FindFirstChild('Ability') and hotbarW.Ability:FindFirstChild('Duration') and hotbarW.Ability.Duration.Visible
                  local infinityAbilityW = abilitiesW and abilitiesW:FindFirstChild('Infinity')
                  local infinityW = infinityAbilityW and infinityAbilityW.Enabled
                  local usingInfinityW = durationUIW and infinityW and Infinity_Ball
                  if prevUsingInfinityTB == nil then
                      prevUsingInfinityTB = usingInfinityW
                      return
                  end
                  if TriggerInfinity_Detection and prevUsingInfinityTB and not usingInfinityW then
                      local targetedBall
                      for _, b in pairs(AutoParry.GetBalls()) do
                          if b:GetAttribute('target') == tostring(LocalPlayer) then
                              targetedBall = b
                              break
                          end
                      end
                      if targetedBall then
                          local singularityCapeW = LocalPlayer.Character.PrimaryPart:FindFirstChild('SingularityCape')
                          if TriggerSingularity_Detection and singularityCapeW then
                              prevUsingInfinityTB = usingInfinityW
                              return
                          end
                          if TriggerDeathSlash_Detection and DeathSlashDetection and durationUIW then
                              prevUsingInfinityTB = usingInfinityW
                              return
                          end
                          AutoParry.ParryAnim(false)
                          local averagePing = GetAveragePing()
                          local useAbility = false
                          local abilityCDW = hotbarW and hotbarW:FindFirstChild('Ability') and hotbarW.Ability.UIGradient
                          if TriggerHighPingProtection and averagePing > 130 then
                              if abilityCDW and abilityCDW.Offset.Y == 0.5 and (abilitiesW["Raging Deflection"].Enabled or abilitiesW["Rapture"].Enabled) then
                                  useAbility = true
                                  Use_Ability:Fire()
                              end
                          end
                          if not useAbility then
                              if TriggerbotType == "Remote" then
                                  if Is_Supported_Test then
                                      AutoParry.PerformRemoteParry(SelectedTriggerParryType)
                                      AutoParry.PerformRemoteParry(SelectedTriggerParryType)
                                  else
                                      SimulateParry()
                                      SimulateParry()
                                      Parries += 2
                                      task.delay(0.5, function() if Parries > 0 then Parries -= 2 end end)
                                  end
                              else
                                  SimulateParry()
                                  SimulateParry()
                                  Parries += 2
                                  task.delay(0.5, function() if Parries > 0 then Parries -= 2 end end)
                              end
                          end
                      end
                  end
                  prevUsingInfinityTB = usingInfinityW
              end)
          else
              for key, connection in pairs(Connections) do
                  if key:match("^triggerbot_") then
                      connection:Disconnect()
                      Connections[key] = nil
                  end
              end
              PostParryTarget = nil
              PostParryVelocityHistory = {}
              PostParryScheduled = {}
          end
      end
  })
  triggerbotModule:create_dropdown({
      title = "Parry Type",
      flag = "TriggerbotType",
      options = Is_Supported_Test and {"Remote", "Keypress"} or {"Keypress"},
      multi_dropdown = false,
      maximum_options = 999,
      callback = function(v)
          TriggerbotType = v
      end
  })
  triggerbotModule:create_dropdown({
      title = "Curve Type",
      flag = "TriggerParryDirection",
      options = {"Backwards", "Camera", "High", "Left", "Random", "Right", "Straight"},
      multi_dropdown = false,
      maximum_options = 999,
      callback = function(v)
          SelectedTriggerParryType = v
      end
  })
  triggerbotModule:create_divider({})
  triggerbotModule:create_checkbox({
      title = "High Ping Protection",
      flag = "TriggerHighPingProtection",
      callback = function(v)
          TriggerHighPingProtection = v
      end
  })
  triggerbotModule:create_checkbox({
      title = "Auto Pre-Click",
      flag = "TriggerAutoPostParry",
      callback = function(v)
          if v then
              if isTriggerbotEnabled then
                  Connections["triggerbot_postParry_deathMonitor"] = Alive.ChildRemoved:Connect(function(removedCharacter)
                      if not Library._config._flags["TriggerAutoPostParry"] then return end
                      if not PostParryTarget or PostParryTarget == "" then return end
                      if removedCharacter.Name ~= PostParryTarget then return end
                      if PostParryScheduled[removedCharacter.Name] then return end
                      local hadHighSpeed = false
                      for ball, speeds in pairs(PostParryVelocityHistory) do
                          for _, speed in ipairs(speeds) do
                              if speed >= 800 then
                                  hadHighSpeed = true
                                  break
                              end
                          end
                          if hadHighSpeed then break end
                      end
                      if hadHighSpeed then
                          PostParryScheduled[removedCharacter.Name] = true
                          local randomDelay = (math.random(130, 160) / 1000)
                          task.delay(randomDelay, function()
                              SimulateParry()
                              PostParryScheduled[removedCharacter.Name] = nil
                          end)
                      end
                      PostParryTarget = nil
                      PostParryVelocityHistory = {}
                  end)
              end
              Connections["triggerbot_postParry_continuousCheck"] = RunService.Heartbeat:Connect(function()
                  if not Library._config._flags["TriggerAutoPostParry"] then return end
                  if not PostParryTarget or PostParryTarget == "" then return end
                  if PostParryScheduled[PostParryTarget] then return end
                  local targetChar = Alive:FindFirstChild(PostParryTarget)
                  if not targetChar then
                      local hadHighSpeed = false
                      for ball, speeds in pairs(PostParryVelocityHistory) do
                          for _, speed in ipairs(speeds) do
                              if speed >= 800 then
                                  hadHighSpeed = true
                                  break
                              end
                          end
                          if hadHighSpeed then break end
                      end
                      if hadHighSpeed then
                          PostParryScheduled[PostParryTarget] = true
                          local randomDelay = (math.random(120, 140) / 1000)
                          task.delay(randomDelay, function()
                              SimulateParry()
                              PostParryScheduled[PostParryTarget] = nil
                          end)
                      end
                      PostParryTarget = nil
                      PostParryVelocityHistory = {}
                  end
              end)
          else
              if Connections["triggerbot_postParry_deathMonitor"] then
                  Connections["triggerbot_postParry_deathMonitor"]:Disconnect()
                  Connections["triggerbot_postParry_deathMonitor"] = nil
              end
              if Connections["triggerbot_postParry_continuousCheck"] then
                  Connections["triggerbot_postParry_continuousCheck"]:Disconnect()
                  Connections["triggerbot_postParry_continuousCheck"] = nil
              end
              PostParryTarget = nil
              PostParryVelocityHistory = {}
              PostParryScheduled = {}
          end
      end
  })
  triggerbotModule:create_checkbox({
      title = "Singularity Detection",
      flag = "TriggerSingularityDetection",
      callback = function(v)
          TriggerSingularity_Detection = v
      end
  })
  triggerbotModule:create_checkbox({
      title = "Infinity Detection",
      flag = "TriggerInfinityDetection",
      callback = function(v)
          TriggerInfinity_Detection = v
      end
  })
  triggerbotModule:create_checkbox({
      title = "Death Slash Detection",
      flag = "TriggerDeathSlashDetection",
      callback = function(v)
          TriggerDeathSlash_Detection = v
      end
  })
  local autoSpamModule = MainTab:create_module({
      title = "Auto Spam",
      flag = "autoSpamModule",
      description = "Automatically spam parries for you (4 clashes)",
      section = "left",
      callback = function(v)
          if v then
              Connections["AutoSpam"] = RunService.Heartbeat:Connect(function()
                  local Ball = AutoParry.GetBall()
                  if not Ball then
                      IsAutoSpamming = false
                      return
                  end
                  local Zoomies = Ball:FindFirstChild('zoomies')
                  if not Zoomies then
                      return
                  end
                  AutoParry.ClosestPlayer()
                  local Ping = game:GetService('Stats').Network.ServerStatsItem['Data Ping']:GetValue()
                  local time = Ping / 2000
                  local playerVel = LocalPlayer.Character.PrimaryPart.Velocity
                  local Ball_Position = Ball.Position
                  local Ball_Future_Position = Ball_Position + Zoomies.VectorVelocity * time
                  local Player_Future_Position = LocalPlayer.Character.PrimaryPart.Position + playerVel * time
                  local Distance = (Player_Future_Position - Ball_Future_Position).Magnitude
                  local Ping_Threshold = math.clamp(Ping / 10, 10, 16)
                  local Ball_Properties = AutoParry.GetBallProps()
                  local Entity_Properties = AutoParry.GetEntityProps()
                  local Spam_Accuracy = AutoParry.SpamService()
                  local Target_Position = Entity_Properties.Position
                  local Target_Distance = LocalPlayer:DistanceFromCharacter(Target_Position)
                  if Target_Distance > Spam_Accuracy or Distance > Spam_Accuracy then
                      IsAutoSpamming = false
                      return
                  end
                  local NumNearby = GetNumNearby()
                  if NumNearby > 1 then
                      IsAutoSpamming = false
                      return
                  end
                  local Predicted_Direction = (Player_Future_Position - Ball_Future_Position).Unit
                  local Ball_Direction = Zoomies.VectorVelocity.Unit
                  local Predicted_Dot = Predicted_Direction:Dot(Ball_Direction)
                  local curved = AutoParry.IsCurved(Ball)
                  local DynamicSpamType = SpamMode
                  if SpamMode == "Dynamic" then
                      local ballSpeed = Ball_Properties.Velocity.Magnitude
                      if ballSpeed > 200 or Distance < 20 then
                          DynamicSpamType = "Blatant"
                      else
                          DynamicSpamType = "Legit"
                      end
                  end
                  local parryThreshold = (DynamicSpamType == "Legit") and 2 or 1
                  if SpamMode == "Dynamic" then
                      parryThreshold = 0
                  end
                  if Distance <= Spam_Accuracy and Parries > parryThreshold and not curved then
                      if not IsAutoSpamming then
                          ClashStartTime = tick()
                      end
                      IsAutoSpamming = true
                      if AutoSpamType == "Remote" then
                          if Is_Supported_Test then
                              AutoParry.Parry(SelectedParryType)
                          else
                              SimulateParry()
                              Parries += 1
                              task.delay(0.5, function() if Parries > 0 then Parries -= 1 end end)
                          end
                      else
                          SimulateParry()
                          Parries += 1
                          task.delay(0.5, function() if Parries > 0 then Parries -= 1 end end)
                      end
                      if not Current_Anim_Track or tick() - LastAnimTime > 0.5 then
                          if Current_Anim_Track then
                              Current_Anim_Track:Stop()
                          end
                          local grabParryAnim = Instance.new("Animation")
                          grabParryAnim.AnimationId = "rbxassetid://14909890816"
                          Current_Anim_Track = LocalPlayer.Character.Humanoid.Animator:LoadAnimation(grabParryAnim)
                          Current_Anim_Track.Priority = Enum.AnimationPriority.Action
                          Current_Anim_Track:Play()
                          LastAnimTime = tick()
                      end
                  else
                      if IsAutoSpamming then
                          ClashEndTime = tick()
                      end
                      IsAutoSpamming = false
                      if Current_Anim_Track then
                          Current_Anim_Track:Stop()
                          Current_Anim_Track = nil
                      end
                  end
              end)
              if AutoSpamType == "Remote" then
                  Connections["LegitAnim"] = RunService.Heartbeat:Connect(function()
                      if IsAutoSpamming then
                          SimulateParry()
                      end
                  end)
              end
          else
              if Connections["AutoSpam"] then
                  Connections["AutoSpam"]:Disconnect()
                  Connections["AutoSpam"] = nil
              end
              if Connections["LegitAnim"] then
                  Connections["LegitAnim"]:Disconnect()
                  Connections["LegitAnim"] = nil
              end
              if Current_Anim_Track then
                  Current_Anim_Track:Stop()
                  Current_Anim_Track = nil
              end
              IsAutoSpamming = false
          end
      end
  })
  autoSpamModule:create_dropdown({
      title = "Spam Type",
      flag = "AutoSpamType",
      options = Is_Supported_Test and {"Remote", "Keypress"} or {"Keypress"},
      multi_dropdown = false,
      maximum_options = 999,
      callback = function(v)
          AutoSpamType = v
      end
  })
  autoSpamModule:create_dropdown({
      title = "Spam Mode",
      flag = "SpamMode",
      options = {"Legit", "Blatant", "Dynamic"},
      multi_dropdown = false,
      maximum_options = 999,
      callback = function(v)
          SpamMode = v
      end
  })


  local visualizerModule = MiscTab:create_module({
      title = "Visualizer",
      flag = "Visualizer",
      description = "Visualizes the parry range",
      section = "left",
      callback = function(v)
          ToggleViz(v)
      end
  })
  local antiLagModule = MiscTab:create_module({
      title = "Anti-Lag",
      flag = "LagReducer",
      description = "Reduces lag by optimizing graphics",
      section = "right",
      callback = function(v)
          Optimize(v)
      end
  })
  local noRenderModule = MiscTab:create_module({
      title = "No Render",
      flag = "NoRender",
      description = "Disables rendering of certain effects",
      section = "left",
      callback = function(value)
          LocalPlayer.PlayerScripts.EffectScripts.ClientFX.Disabled = value
          if value then
              Connections['NoRender'] = Workspace.Runtime.ChildAdded:Connect(function(value)
                  Debris:AddItem(value, 0)
              end)
          else
              if Connections['NoRender'] then
                  Connections['NoRender']:Disconnect()
                  Connections['NoRender'] = nil
              end
          end
      end
  })
  local Billboard_Labels = {}
  local ConnectionsTable = {}
  local abilityESPModule = MiscTab:create_module({
      title = "Ability ESP",
      flag = "AbilityESP",
      description = "Shows opponents abilities",
      section = "right",
      callback = function(state)
          if state then
              local function updateLabel(player)
                  local text = Billboard_Labels[player]
                  if text and player.Character then
                      local ability = player:GetAttribute("EquippedAbility")
                      if ability then
                          text.Text = player.DisplayName .. " [" .. ability .. "]"
                      else
                          text.Text = player.DisplayName .. " [ In Lobby ]"
                      end
                      text.Parent.Enabled = true
                  end
              end
              local function createLabel(player)
                  if player == LocalPlayer then return end
                  local char = player.Character or player.CharacterAdded:Wait()
                  local head = char:WaitForChild("Head")
                  local label = Instance.new("BillboardGui")
                  label.Name = "AbilityESP"
                  label.Parent = head
                  label.Adornee = head
                  label.Size = UDim2.new(0, 220, 0, 60)
                  label.StudsOffset = Vector3.new(0, 3, 0)
                  label.AlwaysOnTop = true
                  local text = Instance.new("TextLabel")
                  text.Parent = label
                  text.BackgroundTransparency = 1
                  text.Size = UDim2.new(1, 0, 1, 0)
                  text.TextColor3 = Color3.new(1, 1, 1)
                  text.TextSize = 18
                  text.Font = Enum.Font.GothamBold
                  Billboard_Labels[player] = text
                  updateLabel(player)
                  local abilityConn = player:GetAttributeChangedSignal("EquippedAbility"):Connect(function()
                      updateLabel(player)
                  end)
                  table.insert(ConnectionsTable, abilityConn)
              end
              for _, player in pairs(Players:GetPlayers()) do
                  createLabel(player)
                  local charConn = player.CharacterAdded:Connect(function()
                      createLabel(player)
                  end)
                  table.insert(ConnectionsTable, charConn)
              end
              local playerAddedConn = Players.PlayerAdded:Connect(function(player)
                  createLabel(player)
                  local charConn = player.CharacterAdded:Connect(function()
                      createLabel(player)
                  end)
                  table.insert(ConnectionsTable, charConn)
              end)
              table.insert(ConnectionsTable, playerAddedConn)
          else
              for _, conn in pairs(ConnectionsTable) do
                  if conn.Connected then
                      conn:Disconnect()
                  end
              end
              ConnectionsTable = {}
              for player, text in pairs(Billboard_Labels) do
                  if text and text.Parent then
                      text.Parent:Destroy()
                  end
              end
              Billboard_Labels = {}
          end
      end
  })
  local skySettingsModule = MiscTab:create_module({
      title = "Sky Settings",
      flag = "skySettings",
      description = "Lets you change the sky to your liking",
      section = "left",
      callback = function(v) end
  })
  skySettingsModule:create_dropdown({
      title = "Sky Box Options",
      flag = "SkyBoxOptions",
      options = {"None", "Space Wave", "Space Wave2", "Turquoise Wave", "Dark Night", "Bright Pink", "White Galaxy"},
      multi_dropdown = false,
      maximum_options = 999,
      callback = function(value)
          local Sky = game.Lighting:FindFirstChildOfClass("Sky") or Instance.new("Sky", game.Lighting)
          if value == "None" then
              for _, prop in pairs({"SkyboxBk", "SkyboxDn", "SkyboxFt", "SkyboxLf", "SkyboxRt", "SkyboxUp"}) do
                  Sky[prop] = ""
              end
              game.Lighting.GlobalShadows = true
          else
              local SkyboxLoader = loadstring(game:HttpGet("https://raw.githubusercontent.com/Forexium/eclipse/main/Skyboxes.lua", true))()
              local skyboxData = SkyboxLoader[value]
              for index, prop in next, {"SkyboxBk", "SkyboxDn", "SkyboxFt", "SkyboxLf", "SkyboxRt", "SkyboxUp"} do
                  Sky[prop] = "rbxassetid://" .. skyboxData[index]
              end
              game.Lighting.GlobalShadows = false
          end
      end
  })
  local lightingSettingsModule = MiscTab:create_module({
      title = "Lighting Settings",
      flag = "lightingSettings",
      description = "Tweak the lighting to your liking",
      section = "right",
      callback = function(v) end
  })
  lightingSettingsModule:create_checkbox({
      title = "Full Bright",
      flag = "FullBright",
      callback = function(value)
          if value then
              game.Lighting.GlobalShadows = false
              game.Lighting.Ambient = Color3.new(1, 1, 1)
          else
              game.Lighting.GlobalShadows = true
              game.Lighting.Ambient = Color3.new(0.5, 0.5, 0.5)
          end
      end
  })
  lightingSettingsModule:create_checkbox({
      title = "Custom Lighting",
      flag = "CustomLighting",
      callback = function(value)
          if value then
              game.Lighting.Ambient = Color3.new(1, 1, 1)
              game.Lighting.Brightness = 2
          else
              game.Lighting.Ambient = Color3.new(0.5, 0.5, 0.5)
              game.Lighting.Brightness = 1
          end
      end
  })
  lightingSettingsModule:create_slider({
      title = "Time of Day",
      flag = "TimeOfDay",
      maximum_value = 24,
      minimum_value = 0,
      value = 12,
      round_number = true,
      callback = function(value)
          game.Lighting.ClockTime = value
      end
  })
  local function ClearHead(char)
      local head = char:WaitForChild("Head")
      head.Transparency = 1
      for _, child in pairs(head:GetChildren()) do
          if child:IsA("Decal") then
              child:Destroy()
          end
      end
  end
  local function ClearHeadless(char)
      local head = char:FindFirstChild("Head")
      if head then
          head.Transparency = 0
          if OriginalFaceTexture then
              local face = Instance.new("Decal")
              face.Name = "face"
              face.Texture = OriginalFaceTexture
              face.Parent = head
          end
      end
  end
  local function Korbloxify(char)
      if char:FindFirstChild("KorbloxLeg") then return end
      local rightLeg = char:WaitForChild("Right Leg")
      rightLeg.Transparency = 1
      rightLeg.CanCollide = false
      local korbloxLeg = Instance.new("Part")
      korbloxLeg.Name = "KorbloxLeg"
      korbloxLeg.Size = rightLeg.Size
      korbloxLeg.Anchored = true
      korbloxLeg.CanCollide = false
      korbloxLeg.Parent = char
      local mesh = Instance.new("SpecialMesh")
      mesh.MeshId = "http://www.roblox.com/asset/?id=12917863813"
      mesh.TextureId = "http://roblox.com/asset/?id=12917863954"
      mesh.Scale = Vector3.new(1.5, 1.5, 1.5)
      mesh.Parent = korbloxLeg
      task.delay(0, function()
          if char and char.Parent then
              KorbloxConnection = RunService.RenderStepped:Connect(function()
                  if rightLeg and korbloxLeg then
                      korbloxLeg.CFrame = rightLeg.CFrame * CFrame.Angles(0, math.rad(180), 0) * CFrame.new(0, 0.5, 0)
                  else
                      KorbloxConnection:Disconnect()
                      KorbloxConnection = nil
                  end
              end)
          end
      end)
  end
  local function ClearKorblox(char)
      if KorbloxConnection then
          KorbloxConnection:Disconnect()
          KorbloxConnection = nil
      end
      local korbloxLeg = char:FindFirstChild("KorbloxLeg")
      if korbloxLeg then
          korbloxLeg:Destroy()
      end
      local rightLeg = char:FindFirstChild("Right Leg")
      if rightLeg then
          rightLeg.Transparency = 0
          rightLeg.CanCollide = true
      end
  end
  local function EnsureModifications()
      local char = LocalPlayer.Character
      if not char then return end
      local head = char:FindFirstChild("Head")
      if head then
          head.Transparency = 1
          for _, child in pairs(head:GetChildren()) do
              if child:IsA("Decal") then
                  child:Destroy()
              end
          end
      end
      local rightLeg = char:FindFirstChild("Right Leg")
      if rightLeg then
          rightLeg.Transparency = 1
          rightLeg.CanCollide = false
      end
      if not char:FindFirstChild("KorbloxLeg") then
          Korbloxify(char)
      end
  end
  local korbloxHeadlessModule = MiscTab:create_module({
      title = "Korblox & Headless",
      flag = "korbloxHeadlessModule",
      description = "Enable Korblox & Headless",
      section = "left",
      callback = function(value)
          local character = LocalPlayer.Character
          if not character then return end
          if value then
              local head = character:FindFirstChild("Head")
              if head then
                  local face = head:FindFirstChild("face")
                  if face and face:IsA("Decal") then
                      OriginalFaceTexture = face.Texture
                  end
              end
              ClearHead(character)
              if HeadDecalConnection then HeadDecalConnection:Disconnect() end
              HeadDecalConnection = head.ChildAdded:Connect(function(child)
                  if child:IsA("Decal") then
                      child:Destroy()
                  end
              end)
              Korbloxify(character)
              if not Check_Refresh then
                  Check_Refresh = RunService.Heartbeat:Connect(EnsureModifications)
              end
          else
              if HeadDecalConnection then
                  HeadDecalConnection:Disconnect()
                  HeadDecalConnection = nil
              end
              ClearHeadless(character)
              ClearKorblox(character)
              if Check_Refresh then
                  Check_Refresh:Disconnect()
                  Check_Refresh = nil
              end
              OriginalFaceTexture = nil
          end
      end
  })
  local musicModule = MiscTab:create_module({
      title = "Music Player",
      flag = "musicModule",
      description = "Play music in game",
      section = "right",
      callback = function(v) end
  })
  musicModule:create_checkbox({
      title = "Enable Music",
      flag = "EnableMusic",
      callback = function(v)
          if v then
              if not Music then
                  Music = Instance.new("Sound")
                  Music.Parent = Workspace
                  Music.Looped = true
              end
              Music.SoundId = soundOptions[SelectedSong]
              Music.Volume = MusicVolume
              Music:Play()
          else
              if Music then
                  Music:Stop()
              end
          end
      end
  })
  musicModule:create_slider({
      title = "Volume",
      flag = "MusicVolume",
      maximum_value = 10,
      minimum_value = 1,
      value = 5,
      round_number = true,
      callback = function(value)
          MusicVolume = value
          if Music then
              Music.Volume = value
          end
      end
  })


musicModule:create_dropdown({
    title = "Song Choice",
    flag = "SongChoice",
    options = {"EEYUH!", "Skibidi Toilet", "DEKUD", "Everybody Wants To Rule The World", "CHWYKU", "ULTCHILL FUNK", "VEM VEM CHILL FUNK", "Grasp the Light", "tobreak", "Rise to the Horizon", "Echoes of the Candy Kingdom", "Speed", "Lo-fi Chill A", "Lo-fi Ambient", "Tears in the Rain"},
    multi_dropdown = false,
    maximum_options = 999,
    callback = function(value)
        SelectedSong = value
        if Music then
            Music.SoundId = soundOptions[value]
            Music:Play()
        end
    end
})

local mainLocalPlayer = Players.LocalPlayer
local speedGui = Instance.new("ScreenGui")
speedGui.Name = "//////////////"
speedGui.Parent = mainLocalPlayer.PlayerGui
speedGui.ResetOnSpawn = false

local speedLabel = Instance.new("TextLabel")
speedLabel.Name = "//////////////"
speedLabel.Size = UDim2.new(0, 200, 0, 50)
speedLabel.Position = UDim2.new(1, -210, 0, 10)
speedLabel.AnchorPoint = Vector2.new(1, 0)
speedLabel.BackgroundTransparency = 1
speedLabel.TextColor3 = Color3.new(1, 1, 1)
speedLabel.TextSize = 20
speedLabel.Font = Enum.Font.GothamBlack
speedLabel.TextXAlignment = Enum.TextXAlignment.Right
speedLabel.TextYAlignment = Enum.TextYAlignment.Top
speedLabel.Text = ""
speedLabel.Parent = speedGui

local lobbySpeedGui = Instance.new("ScreenGui")
lobbySpeedGui.Name = "//////////////"
lobbySpeedGui.Parent = mainLocalPlayer.PlayerGui
lobbySpeedGui.ResetOnSpawn = false

local lobbySpeedLabel = Instance.new("TextLabel")
lobbySpeedLabel.Name = "//////////////"
lobbySpeedLabel.Size = UDim2.new(0, 200, 0, 50)
lobbySpeedLabel.Position = UDim2.new(1, -210, 0, 60)
lobbySpeedLabel.AnchorPoint = Vector2.new(1, 0)
lobbySpeedLabel.BackgroundTransparency = 1
lobbySpeedLabel.TextColor3 = Color3.new(1, 1, 1)
lobbySpeedLabel.TextSize = 20
lobbySpeedLabel.Font = Enum.Font.GothamBlack
lobbySpeedLabel.TextXAlignment = Enum.TextXAlignment.Right
lobbySpeedLabel.TextYAlignment = Enum.TextYAlignment.Top
lobbySpeedLabel.Text = ""
lobbySpeedLabel.Parent = lobbySpeedGui

local curveGui = Instance.new("ScreenGui")
curveGui.Name = "//////////////"
curveGui.Parent = mainLocalPlayer.PlayerGui
curveGui.ResetOnSpawn = false

local curveLabel = Instance.new("TextLabel")
curveLabel.Name = "//////////////"
curveLabel.Size = UDim2.new(0, 200, 0, 50)
curveLabel.Position = UDim2.new(1, -210, 0, 70)
curveLabel.AnchorPoint = Vector2.new(1, 0)
curveLabel.BackgroundTransparency = 1
curveLabel.TextColor3 = Color3.new(1, 1, 1)
curveLabel.TextSize = 20
curveLabel.Font = Enum.Font.GothamBlack
curveLabel.TextXAlignment = Enum.TextXAlignment.Right
curveLabel.TextYAlignment = Enum.TextYAlignment.Top
curveLabel.Text = ""
curveLabel.Parent = curveGui

local function GetLobbyBall()
    for _, instance in pairs(Workspace.TrainingBalls:GetChildren()) do
        if instance:IsA("BasePart") and instance:GetAttribute("realBall") then
            instance.CanCollide = false
            return instance
        end
    end
    return nil
end

local ballModule = MiscTab:create_module({
    title = "Ball Info",
    flag = "ballModule",
    description = "Shows info about the ball like speed",
    section = "left",
    callback = function(v) end
})

ballModule:create_checkbox({
    title = "Ball Speed Stats",
    flag = "ballSpeedStats",
    callback = function(v)
        if not v then
            if speedGui.Parent then
                speedLabel.Text = ""
            end
        end
    end
})

ballModule:create_checkbox({
    title = "Lobby Ball Speed Stats",
    flag = "lobbyBallSpeedStats",
    callback = function(v)
        if not v then
            if lobbySpeedGui.Parent then
                lobbySpeedLabel.Text = ""
            end
        end
    end
})

ballModule:create_checkbox({
    title = "Ball Curve Info",
    flag = "ballCurveInfo",
    callback = function(v)
        if not v then
            if curveGui.Parent then
                curveLabel.Text = ""
            end
        end
    end
})

RunService.RenderStepped:Connect(function()
    local ingameVelocity = Library._config._flags["ballSpeedStats"]
    local lobbyVelocity = Library._config._flags["lobbyBallSpeedStats"]
    local curveInfo = Library._config._flags["ballCurveInfo"]
    if ingameVelocity then
        local ball = AutoParry.GetBall()
        if ball then
            local velocity = ball.Velocity.Magnitude
            if velocity > PeakVel then
                PeakVel = velocity
            end
            speedLabel.Text = "ball velocity: " .. tostring(math.floor(velocity)) .. "\npeak velocity: " .. tostring(math.floor(PeakVel))
        else
            speedLabel.Text = "ball velocity: undefined\npeak velocity: undefined"
            PeakVel = 0
        end
    else
        speedLabel.Text = ""
    end
    if lobbyVelocity then
        local lobbyBall = GetLobbyBall()
        if lobbyBall then
            local velocity = lobbyBall.Velocity.Magnitude
            lobbySpeedLabel.Text = "L BALL velocity: " .. tostring(math.floor(velocity))
        else
            lobbySpeedLabel.Text = "L BALL velocity: undefined"
        end
        lobbySpeedLabel.Position = ingameVelocity and UDim2.new(1, -210, 0, 60) or UDim2.new(1, -210, 0, 10)
    else
        lobbySpeedLabel.Text = ""
    end
    if curveInfo then
        local ball = AutoParry.GetBall()
        if ball then
            local curved = AutoParry.IsCurved(ball)
            curveLabel.Text = "curved: " .. (curved and "yes" or "no")
        else
            curveLabel.Text = "curved: undefined"
        end
        local posY = 10
        if ingameVelocity then posY = posY + 50 end
        if lobbyVelocity then posY = posY + 50 end
        curveLabel.Position = UDim2.new(1, -210, 0, posY)
    else
        curveLabel.Text = ""
    end
end)

mainLocalPlayer.CharacterAdded:Connect(function()
    if speedGui.Parent then
        speedGui:Destroy()
    end
    speedGui = Instance.new("ScreenGui")
    speedGui.Name = "//////////////"
    speedGui.Parent = mainLocalPlayer.PlayerGui
    speedGui.ResetOnSpawn = false
    speedLabel = Instance.new("TextLabel")
    speedLabel.Name = "//////////////"
    speedLabel.Size = UDim2.new(0, 200, 0, 50)
    speedLabel.Position = UDim2.new(1, -210, 0, 10)
    speedLabel.AnchorPoint = Vector2.new(1, 0)
    speedLabel.BackgroundTransparency = 1
    speedLabel.TextColor3 = Color3.new(1, 1, 1)
    speedLabel.TextSize = 20
    speedLabel.Font = Enum.Font.GothamBlack
    speedLabel.TextXAlignment = Enum.TextXAlignment.Right
    speedLabel.TextYAlignment = Enum.TextYAlignment.Top
    speedLabel.Text = Library._config._flags["ballSpeedStats"] and "ball velocity: N/A\npeak velocity: N/A" or ""
    speedLabel.Parent = speedGui
    if lobbySpeedGui.Parent then
        lobbySpeedGui:Destroy()
    end
    lobbySpeedGui = Instance.new("ScreenGui")
    lobbySpeedGui.Name = "//////////////"
    lobbySpeedGui.Parent = mainLocalPlayer.PlayerGui
    lobbySpeedGui.ResetOnSpawn = false
    lobbySpeedLabel = Instance.new("TextLabel")
    lobbySpeedLabel.Name = "//////////////"
    lobbySpeedLabel.Size = UDim2.new(0, 200, 0, 50)
    lobbySpeedLabel.Position = UDim2.new(1, -210, 0, 60)
    lobbySpeedLabel.AnchorPoint = Vector2.new(1, 0)
    lobbySpeedLabel.BackgroundTransparency = 1
    lobbySpeedLabel.TextColor3 = Color3.new(1, 1, 1)
    lobbySpeedLabel.TextSize = 20
    lobbySpeedLabel.Font = Enum.Font.GothamBlack
    lobbySpeedLabel.TextXAlignment = Enum.TextXAlignment.Right
    lobbySpeedLabel.TextYAlignment = Enum.TextYAlignment.Top
    lobbySpeedLabel.Text = Library._config._flags["lobbyBallSpeedStats"] and "lobby ball velocity: N/A" or ""
    lobbySpeedLabel.Parent = lobbySpeedGui
    if curveGui.Parent then
        curveGui:Destroy()
    end
    curveGui = Instance.new("ScreenGui")
    curveGui.Name = "//////////////"
    curveGui.Parent = mainLocalPlayer.PlayerGui
    curveGui.ResetOnSpawn = false
    curveLabel = Instance.new("TextLabel")
    curveLabel.Name = "//////////////"
    curveLabel.Size = UDim2.new(0, 200, 0, 50)
    curveLabel.Position = UDim2.new(1, -210, 0, 70)
    curveLabel.AnchorPoint = Vector2.new(1, 0)
    curveLabel.BackgroundTransparency = 1
    curveLabel.TextColor3 = Color3.new(1, 1, 1)
    curveLabel.TextSize = 20
    curveLabel.Font = Enum.Font.GothamBlack
    curveLabel.TextXAlignment = Enum.TextXAlignment.Right
    curveLabel.TextYAlignment = Enum.TextYAlignment.Top
    curveLabel.Text = Library._config._flags["ballCurveInfo"] and "Curved: N/A" or ""
    curveLabel.Parent = curveGui
end)
AIPlaying = false
AICoroutine = nil
AILastPos = Vector3.new(0, 0, 0)
AIStuckTimer = 0
AIPathTime = 0
AICurvePoint = nil
AILastUpdate = 0
AILastDoubleJumpTime = 0
AIJumpAnimation = nil
AIFeintTimer = 0
AIFeintActive = false
AIFeintCooldown = 0
AIDidJump = false
AILastJumpTime = 0

function IsStuck(currentPos)
    if (currentPos - AILastPos).Magnitude < 1 then
        AIStuckTimer = AIStuckTimer + 1
    else
        AIStuckTimer = 0
    end
    AILastPos = currentPos
    return AIStuckTimer > 5
end

function MoveToPos(character, targetPos)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    local primaryPart = character:FindFirstChild("HumanoidRootPart") or character.PrimaryPart
    if not humanoid or not primaryPart then return end
    humanoid:MoveTo(targetPos)
end

function SmoothLerp(start, finish, alpha)
    return start + (finish - start) * alpha
end

function BezierCurve(start, middle, finish, alpha)
    local point1 = SmoothLerp(start, middle, alpha)
    local point2 = SmoothLerp(middle, finish, alpha)
    return SmoothLerp(point1, point2, alpha)
end

function CalculateCurvePoint(start, finish)
    local midpoint = (start + finish) * 0.5
    local delta = start - finish
    
    if delta.Magnitude < 5 then
        return finish
    end
    
    local angle = math.atan2(delta.Z, delta.X)
    local curveDistance = delta.Magnitude * 0.7
    
    local option1X = math.cos(angle + math.pi / 2)
    local option1Z = math.sin(angle + math.pi / 2)
    local option1 = midpoint + Vector3.new(option1X, 0, option1Z) * curveDistance
    
    local option2X = math.cos(angle - math.pi / 2)
    local option2Z = math.sin(angle - math.pi / 2)
    local option2 = midpoint + Vector3.new(option2X, 0, option2Z) * curveDistance
    
    local direction = start - midpoint
    
    if (option1 - midpoint):Dot(direction) < 0 then
        return option1
    else
        return option2
    end
end

function GetCurvedPath(start, finish, deltaTime)
    AIPathTime = AIPathTime + deltaTime
    local progress = math.clamp(AIPathTime / 0.9, 0, 1)
    
    if progress >= 1 then
        local gap = (start - finish).Magnitude
        if gap >= 10 then
            AIPathTime = 0
        end
        AICurvePoint = nil
        return finish
    end
    
    if not AICurvePoint then
        AICurvePoint = CalculateCurvePoint(start, finish)
    end
    
    return BezierCurve(start, AICurvePoint, finish, progress)
end

function CheckPercentage(threshold)
    local elapsed = tick() - AILastUpdate
    if elapsed < 0.3 then
        return false
    end
    
    local roll = math.random(100)
    AILastUpdate = tick()
    
    return threshold >= roll
end

function FindMapFloor()
    local floor = Workspace:FindFirstChild("FLOOR")
    
    if not floor then
        for _, obj in pairs(Workspace:GetDescendants()) do
            if obj:IsA("MeshPart") or obj:IsA("BasePart") then
                local dimensions = obj.Size
                if dimensions.X > 50 and dimensions.Z > 50 and obj.Position.Y < 5 then
                    return obj
                end
            end
        end
    end
    
    return floor
end

function LoadJumpAnimation(character)
    if AIJumpAnimation then
        AIJumpAnimation:Destroy()
        AIJumpAnimation = nil
    end
    
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid or not humanoid.Animator then return end
    
    local animAsset = ReplicatedStorage.Assets.Tutorial.Animations.DoubleJump
    AIJumpAnimation = humanoid.Animator:LoadAnimation(animAsset)
end

function GetPing()
    local success, ping = pcall(function()
        return game:GetService('Stats').Network.ServerStatsItem['Data Ping']:GetValue()
    end)
    return success and ping or 50
end

function GetClosestPlayerDistance(rootPart)
    local closestDist = math.huge
    for _, player in pairs(game.Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character.PrimaryPart then
            local distance = (rootPart.Position - player.Character.PrimaryPart.Position).Magnitude
            if distance < closestDist then
                closestDist = distance
            end
        end
    end
    return closestDist
end

function IsInDangerZone(rootPart)
    local minDistance = GetClosestPlayerDistance(rootPart)
    return minDistance < 15
end

function CalculateTargetPosition(ball, rootPart)
    local floor = FindMapFloor()
    if not floor or not ball then
        return nil
    end
    
    local zoomies = ball:FindFirstChild('zoomies')
    local ballVelocity = zoomies and zoomies.VectorVelocity or ball.Velocity
    local ballSpeed = ballVelocity.Magnitude
    
    local awayDirection = (rootPart.Position - ball.Position).Unit
    
    local baseGap = 35
    local speedBonus = 0
    
    local minPlayerDist = GetClosestPlayerDistance(rootPart)
    local safetyBonus = 0
    if minPlayerDist < 20 then
        safetyBonus = (20 - minPlayerDist) * 2
    end
    
    if AIFeintActive then
        if ballSpeed > 700 then
            speedBonus = -50
        elseif ballSpeed > 500 then
            speedBonus = -35
        elseif ballSpeed > 300 then
            speedBonus = -20
        else
            speedBonus = -12
        end
    else
        if ballSpeed >= 800 then
            speedBonus = 120
        elseif ballSpeed >= 700 then
            speedBonus = 95
        elseif ballSpeed >= 600 then
            speedBonus = 75
        elseif ballSpeed >= 500 then
            speedBonus = 55
        elseif ballSpeed >= 400 then
            speedBonus = 40
        elseif ballSpeed >= 300 then
            speedBonus = 28
        elseif ballSpeed >= 200 then
            speedBonus = 18
        else
            speedBonus = 10
        end
    end
    
    local totalGap = baseGap + speedBonus + safetyBonus
    local retreatVector = awayDirection * totalGap
    
    local timeValue = os.time() / 1.4
    local xWave = math.sin(timeValue) * 30
    local zWave = math.cos(timeValue) * 30
    
    local movement = Vector3.new(xWave, 0, zWave)
    local destination = floor.Position + retreatVector + movement
    
    local bounds = floor.Size
    local xLimit = bounds.X / 2 - 8
    local zLimit = bounds.Z / 2 - 8
    
    local finalX = math.clamp(destination.X, floor.Position.X - xLimit, floor.Position.X + xLimit)
    local finalZ = math.clamp(destination.Z, floor.Position.Z - zLimit, floor.Position.Z + zLimit)
    
    return Vector3.new(finalX, floor.Position.Y + 5, finalZ)
end

function ExecuteDoubleJump(character)
    local currentTime = tick()
    
    -- Check if we actually jumped recently (within 2 seconds)
    if currentTime - AILastJumpTime > 2 then
        return
    end
    
    if currentTime - AILastDoubleJumpTime < 2 then
        return
    end
    
    if not CheckPercentage(Double_Jump_Chance) then
        return
    end
    
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid then return end
    
    if humanoid.FloorMaterial ~= Enum.Material.Air and humanoid:GetState() ~= Enum.HumanoidStateType.Freefall then
        return
    end
    
    AILastDoubleJumpTime = currentTime
    
    local ping = GetPing()
    local animDelay = math.clamp(ping / 1000 * 0.5, 0.02, 0.08)
    
    local force = math.huge
    local boost = Instance.new("BodyVelocity")
    boost.MaxForce = Vector3.new(force, force, force)
    boost.Velocity = Vector3.new(0, 80, 0)
    boost.Parent = character.HumanoidRootPart
    
    game:GetService("Debris"):AddItem(boost, 0.001)
    ReplicatedStorage.Remotes.DoubleJump:FireServer()
    
    task.delay(animDelay, function()
        if not character or not character:FindFirstChild("Humanoid") then return end
        
        local currentHumanoid = character:FindFirstChild("Humanoid")
        
        -- FIX: Check BOTH conditions - must be in air AND in freefall state
        if currentHumanoid.FloorMaterial ~= Enum.Material.Air or 
           currentHumanoid:GetState() ~= Enum.HumanoidStateType.Freefall then
            return
        end
        
        if not AIJumpAnimation then
            LoadJumpAnimation(character)
        end
        
        if AIJumpAnimation then
            AIJumpAnimation:Play()
        end
    end)
end

function PerformJump(character)
    if not Can_Jump then
        return
    end
    
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid then return end
    
    if humanoid.FloorMaterial ~= Enum.Material.Air then
        if not CheckPercentage(Jump_Chance) then
            return
        end
        
        -- Record that we initiated a jump
        AILastJumpTime = tick()
        humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
    else
        if humanoid:GetState() == Enum.HumanoidStateType.Freefall then
            ExecuteDoubleJump(character)
        end
    end
end

function UpdateFeintBehavior()
    local currentTime = tick()
    
    if AIFeintCooldown > currentTime then
        return
    end
    
    if AIFeintActive then
        if currentTime - AIFeintTimer > math.random(1.5, 3.5) then
            AIFeintActive = false
            AIFeintCooldown = currentTime + math.random(10, 18)
        end
    else
        if math.random(100) <= 12 then
            AIFeintActive = true
            AIFeintTimer = currentTime
        end
    end
end

AIMethods = {
    BallChaser = function(character)
        if IsAutoSpamming or (ClashEndTime > 0 and tick() - ClashEndTime < 2.5) then
            return
        end
        
        local rootPart = character:FindFirstChild("HumanoidRootPart") or character.PrimaryPart
        if not rootPart then return end
        
        if Library._config._flags["StopWhenClash"] and IsInDangerZone(rootPart) then
            MoveToPos(character, rootPart.Position)
            return
        end
        
        if not AIJumpAnimation then
            LoadJumpAnimation(character)
        end
        
        if IsStuck(rootPart.Position) and Can_Jump then
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
            end
        end
        
        local ball = AutoParry.GetBall()
        if ball then
            UpdateFeintBehavior()
            
            local targetSpot = CalculateTargetPosition(ball, rootPart)
            
            if not targetSpot then
                return
            end
            
            local smoothPath = GetCurvedPath(rootPart.Position, targetSpot, 0.1)
            MoveToPos(character, smoothPath)
            PerformJump(character)
        else
            local randomWander = rootPart.Position + Vector3.new(math.random(-12, 12), 0, math.random(-12, 12))
            MoveToPos(character, randomWander)
        end
    end
}

function RunAI()
    while AIPlaying do
        local char = LocalPlayer.Character
        if char then
            AIMethods["BallChaser"](char)
        end
        task.wait(0.1)
    end
end

LocalPlayer.CharacterAdded:Connect(function(char)
    task.wait(0.5)
    if AIPlaying then
        AIJumpAnimation = nil
        AILastDoubleJumpTime = 0
        AILastJumpTime = 0
        LoadJumpAnimation(char)
    end
end)

aiPlayModule = AITab:create_module({
    title = "AI Play",
    flag = "aiPlayModule",
    description = "Good for legit, auto plays for you",
    section = "left",
    callback = function(v)
        AIPlaying = v
        if AIPlaying then
            if AICoroutine then task.cancel(AICoroutine) end
            AICoroutine = task.spawn(RunAI)
        elseif AICoroutine then
            task.cancel(AICoroutine)
            AICoroutine = nil
        end
    end
})

aiPlayModule:create_checkbox({
    title = "Stop When Clash Incoming",
    flag = "StopWhenClash",
    callback = function(v)
    end
})

aiPlayModule:create_checkbox({
    title = "Auto Vote",
    flag = "AutoVote",
    callback = function(v)
        if v then
            task.spawn(function()
                while Library._config._flags["AutoVote"] do
                    local ohString1 = "FFA"
                    game:GetService("ReplicatedStorage").Packages._Index["sleitnick_net@0.1.0"].net["RE/UpdateVotes"]:FireServer(ohString1)
                    task.wait(1)
                end
            end)
        end
    end
})

function Enable_ANTIAFK()
    local GC = getconnections or get_signal_cons
    if GC then
        for i,v in pairs(GC(Players.LocalPlayer.Idled)) do
            if v["Disable"] then
                v["Disable"](v)
            elseif v["Disconnect"] then
                v["Disconnect"](v)
            end
        end
    else
        local VirtualUser = cloneref(game:GetService("VirtualUser"))
        AntiAFKConnection = Players.LocalPlayer.Idled:Connect(function()
            VirtualUser:CaptureController()
            VirtualUser:ClickButton2(Vector2.new())
        end)
    end
end

function Disable_ANTIAFK()
    if AntiAFKConnection then
        AntiAFKConnection:Disconnect()
        AntiAFKConnection = nil
    end
end

aiPlayModule:create_checkbox({
    title = "Anti AFK",
    flag = "AntiAFK",
    callback = function(v)
        if v then
            Enable_ANTIAFK()
        else
            Disable_ANTIAFK()
        end
    end
})

aiPlayModule:create_checkbox({
    title = "Enable Jumping",
    flag = "EnableJumping",
    callback = function(v)
        Can_Jump = v
    end
})

aiPlayModule:create_divider({})

aiPlayModule:create_slider({
    title = "Distance from Ball",
    flag = "DistanceFromBall",
    maximum_value = 50,
    minimum_value = 10,
    value = 30,
    round_number = true,
    callback = function(v)
        Ball_Distance = v
    end
})

aiPlayModule:create_slider({
    title = "Speed Multiplier",
    flag = "Speed_Multiplier",
    maximum_value = 100,
    minimum_value = 0,
    value = 50,
    round_number = true,
    callback = function(v)
        Speed_Multiplier = v
    end
})

aiPlayModule:create_slider({
    title = "Transversing",
    flag = "Transversing",
    maximum_value = 50,
    minimum_value = 0,
    value = 10,
    round_number = true,
    callback = function(v)
        Turn_Radius = v
    end
})

aiPlayModule:create_slider({
    title = "Jump Chance",
    flag = "JumpChance",
    maximum_value = 100,
    minimum_value = 0,
    value = 50,
    round_number = true,
    callback = function(v)
        Jump_Chance = v
    end
})

aiPlayModule:create_slider({
    title = "Double Jump Chance",
    flag = "DoubleJumpChance",
    maximum_value = 100,
    minimum_value = 0,
    value = 20,
    round_number = true,
    callback = function(v)
        Double_Jump_Chance = v
    end
})



autoRankedQueueModule = AutoFarmTab:create_module({
    title = "Auto Ranked Queue",
    flag = "autoRankedQueueModule",
    description = "Automatically queues ranked for you",
    section = "left",
    callback = function(v)
        if v then
            if game.PlaceId == 14915220621 or game.PlaceId == 14732610803 or game.PlaceId == 14732610803 then
			local args = {
				"Ranked",
				"FFA",
				"Normal",
				"Auto"
						 }
			game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("JoinQueue"):FireServer(unpack(args))

            else
                print("PlaceId Doesn't Match ")
            end
        end
    end
})

gravityModule = MiscTab:create_module({
    title = "Gravity",
    flag = "gravityModule",
    description = "Little Fun Gravity Slider",
    section = "right",
    callback = function(v) end
})

gravityModule:create_slider({
    title = "Custom Gravity",
    flag = "CustomGravity",
    maximum_value = 500,
    minimum_value = 0,
    value = 196.2,
    round_number = true,
    callback = function(value)
        Workspace.Gravity = value
    end
})

function ClearHead(char)
    local head = char:WaitForChild("Head")
    head.Transparency = 1
    for _, child in pairs(head:GetChildren()) do
        if child:IsA("Decal") then
            child:Destroy()
        end
    end
end

function ClearHeadless(char)
    local head = char:FindFirstChild("Head")
    if head then
        head.Transparency = 0
        if OriginalFaceTexture then
            local face = Instance.new("Decal")
            face.Name = "face"
            face.Texture = OriginalFaceTexture
            face.Parent = head
        end
    end
end

 function Korbloxify(char)
    if char:FindFirstChild("KorbloxLeg") then return end
    local rightLeg = char:WaitForChild("Right Leg")
    rightLeg.Transparency = 1
    rightLeg.CanCollide = false
    local korbloxLeg = Instance.new("Part")
    korbloxLeg.Name = "KorbloxLeg"
    korbloxLeg.Size = rightLeg.Size
    korbloxLeg.Anchored = true
    korbloxLeg.CanCollide = false
    korbloxLeg.Parent = char
    local mesh = Instance.new("SpecialMesh")
    mesh.MeshId = "http://www.roblox.com/asset/?id=12917863813"
    mesh.TextureId = "http://roblox.com/asset/?id=12917863954"
    mesh.Scale = Vector3.new(1.5, 1.5, 1.5)
    mesh.Parent = korbloxLeg
    task.delay(0.5, function()
        if char and char.Parent then
            KorbloxConnection = RunService.RenderStepped:Connect(function()
                if rightLeg and korbloxLeg then
                    korbloxLeg.CFrame = rightLeg.CFrame * CFrame.Angles(0, math.rad(180), 0) * CFrame.new(0, 0.5, 0)
                else
                    KorbloxConnection:Disconnect()
                    KorbloxConnection = nil
                end
            end)
        end
    end)
end

 function ClearKorblox(char)
    if KorbloxConnection then
        KorbloxConnection:Disconnect()
        KorbloxConnection = nil
    end
    local korbloxLeg = char:FindFirstChild("KorbloxLeg")
    if korbloxLeg then
        korbloxLeg:Destroy()
    end
    local rightLeg = char:FindFirstChild("Right Leg")
    if rightLeg then
        rightLeg.Transparency = 0
        rightLeg.CanCollide = true
    end
end

 function EnsureModifications()
    local char = LocalPlayer.Character
    if not char then return end
    local head = char:FindFirstChild("Head")
    if head then
        head.Transparency = 1
        for _, child in pairs(head:GetChildren()) do
            if child:IsA("Decal") then
                child:Destroy()
            end
        end
    end
    local rightLeg = char:FindFirstChild("Right Leg")
    if rightLeg then
        rightLeg.Transparency = 1
        rightLeg.CanCollide = false
    end
    if not char:FindFirstChild("KorbloxLeg") then
        Korbloxify(char)
    end
end

fovModule = MiscTab:create_module({
    title = "Field Of View",
    flag = "fovModule",
    description = "Change camera FOV",
    section = "left",
    callback = function(v) end
})

fovModule:create_slider({
    title = "FOV Value",
    flag = "FieldOfViewValue",
    maximum_value = 120,
    minimum_value = 70,
    value = 70,
    round_number = true,
    callback = function(value)
        local camera = Workspace.CurrentCamera
        if camera then
            camera.FieldOfView = value
        end
    end
})

LocalPlayer.CharacterAdded:Connect(function(char)
    task.wait(0.1)
    local camera = Workspace.CurrentCamera
    if camera then
        camera.FieldOfView = Library._config._flags["FieldOfViewValue"]
    end
end)




ReplicatedStorage.Remotes.ParrySuccessAll.OnClientEvent:Connect(function(_, root)
    if root.Parent and root.Parent ~= LocalPlayer.Character then
        if root.Parent.Parent ~= Workspace.Alive then
            return
        end
        local ball = AutoParry.GetBall()
        if not ball then return end
        local zoomies = ball:FindFirstChild('zoomies')
        if not zoomies then return end
        local Speed = zoomies.VectorVelocity.Magnitude
        local Distance = (LocalPlayer.Character.PrimaryPart.Position - ball.Position).Magnitude
        local Velocity = zoomies.VectorVelocity
        local Ball_Direction = Velocity.Unit
        local Direction = (LocalPlayer.Character.PrimaryPart.Position - ball.Position).Unit
        local Dot = Direction:Dot(Ball_Direction)
        local Speed_Threshold = math.min(Speed / 100, 40)
        local Angle_Threshold = 40 * math.max(Dot, 0)
        local Ping = game:GetService('Stats').Network.ServerStatsItem['Data Ping']:GetValue()
        local Reach_Time = Distance / Speed - (Ping / 1000)
        local Enough_Speed = Speed > 100
        local Ball_Distance_Threshold = 15 - math.min(Distance / 1000, 15) - Angle_Threshold + Speed_Threshold
        if Enough_Speed and Reach_Time > Ping / 10 then
            Ball_Distance_Threshold = math.max(Ball_Distance_Threshold - 15, 15)
        end
        if root ~= LocalPlayer.Character.PrimaryPart and Distance > Ball_Distance_Threshold then
            Curve_Time = tick()
        end
    end
    AutoParry.ClosestPlayer()
    local ball = AutoParry.GetBall()
    if not ball or not GrabParry then return end
    GrabParry:Stop()
end)

ReplicatedStorage.Remotes.ParrySuccess.OnClientEvent:Connect(function()
    if LocalPlayer.Character.Parent ~= Workspace.Alive then return end
    if not GrabParry then return end
    GrabParry:Stop()
end)

Runtime.ChildAdded:Connect(function(value)
    if value.Name == 'Tornado' then
        AeroTime = tick()
        Aerodynamic = true
    end
end)

Workspace.Balls.ChildAdded:Connect(function(ball)
    Parried = false
    LobbyParried = false
    wasBackwards[ball] = false
    PredictedPositions = {}
    if Library._config._flags["autoSpamModule"] then
        Connections["spam_target_" .. tostring(ball)] = ball:GetAttributeChangedSignal('target'):Connect(function()
            local target = ball:GetAttribute('target')
            if target ~= tostring(LocalPlayer) then
                IsAutoSpamming = false
            end
        end)
    end
end)

Workspace.Balls.ChildRemoved:Connect(function(child)
    Parries = 0
    Parried = false
    LobbyParried = false
    PredictedPositions = {}
    if BallSenderTracking then 
        if BallSenderTracking[child] then 
            BallSenderTracking[child] = nil
        end 
    end 
    local key = "spam_target_" .. tostring(child)
    if Connections[key] then
        Connections[key]:Disconnect()
        Connections[key] = nil
    end
    if AutoParry.Previous_Positions then
        AutoParry.Previous_Positions[child] = nil
    end
    if AutoParry.Velocity_History then
        AutoParry.Velocity_History[child] = nil
    end
    if AutoParry.Dot_Histories then
        AutoParry.Dot_Histories[child] = nil
    end
    if AutoParry.Previous_Speeds then
        AutoParry.Previous_Speeds[child] = nil
    end
    if AutoParry.Distance_History then
        AutoParry.Distance_History[child] = nil
    end
    if AutoParry.Previous_Velocities then
        AutoParry.Previous_Velocities[child] = nil
    end
    wasBackwards[child] = nil
end)


RunService.Heartbeat:Connect(function()
    Update_Ping()
end)

main:load()
